Index: Downloads/PyOpenGL-accelerate-3.1.0/src/arraydatatype.c
===================================================================
--- Downloads.orig/PyOpenGL-accelerate-3.1.0/src/arraydatatype.c
+++ Downloads/PyOpenGL-accelerate-3.1.0/src/arraydatatype.c
@@ -599,7 +599,7 @@ struct __pyx_obj_17OpenGL_accelerate_7wr
 
 /* "OpenGL_accelerate/formathandler.pxd":3
  * """Cython import description for formathandler types"""
- * 
+ *
  * cdef class FormatHandler:             # <<<<<<<<<<<<<<
  * 	cdef public int ERROR_ON_COPY
  * 	cdef object c_from_param( self, object instance, object typeCode)
@@ -613,7 +613,7 @@ struct __pyx_obj_17OpenGL_accelerate_13f
 
 /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/arraydatatype.pyx":13
  *     cdef object PyDict_GetItem( object, object )
- * 
+ *
  * cdef class HandlerRegistry:             # <<<<<<<<<<<<<<
  *     """C-coded registry of format handlers for array data-formats"""
  *     cdef dict registry
@@ -631,10 +631,10 @@ struct __pyx_obj_17OpenGL_accelerate_13a
 
 /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/arraydatatype.pyx":108
  * cdef HandlerRegistry GLOBAL_REGISTRY = HandlerRegistry(plugins.FormatHandler.match)
- * 
+ *
  * cdef class ArrayDatatype:             # <<<<<<<<<<<<<<
  *     """Mix-in for array datatype classes
- * 
+ *
  */
 struct __pyx_obj_17OpenGL_accelerate_13arraydatatype_ArrayDatatype {
   PyObject_HEAD
@@ -647,10 +647,10 @@ struct __pyx_obj_17OpenGL_accelerate_13a
 
 /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/arraydatatype.pyx":263
  * # Now some array helper functions...
- * 
+ *
  * cdef class Output(cArgConverter):             # <<<<<<<<<<<<<<
  *     """CConverter generating static-size typed output arrays
- * 
+ *
  */
 struct __pyx_obj_17OpenGL_accelerate_13arraydatatype_Output {
   struct __pyx_obj_17OpenGL_accelerate_7wrapper_cArgConverter __pyx_base;
@@ -675,10 +675,10 @@ struct __pyx_obj_17OpenGL_accelerate_13a
 
 /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/arraydatatype.pyx":319
  *         return self.arrayType.c_zeros( self.c_getSize(pyArgs), self.arrayType.typeConstant )
- * 
+ *
  * cdef class SizedOutput( Output ):             # <<<<<<<<<<<<<<
  *     """Output class that looks up output size via a callable function
- * 
+ *
  */
 struct __pyx_obj_17OpenGL_accelerate_13arraydatatype_SizedOutput {
   struct __pyx_obj_17OpenGL_accelerate_13arraydatatype_Output __pyx_base;
@@ -701,11 +701,11 @@ struct __pyx_obj_17OpenGL_accelerate_13a
 
 
 /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/arraydatatype.pyx":360
- * 
- * 
+ *
+ *
  * cdef class AsArrayOfType(pyArgConverter):             # <<<<<<<<<<<<<<
  *     """Given arrayName and typeName coerce arrayName to array of type typeName
- * 
+ *
  */
 struct __pyx_obj_17OpenGL_accelerate_13arraydatatype_AsArrayOfType {
   struct __pyx_obj_17OpenGL_accelerate_7wrapper_pyArgConverter __pyx_base;
@@ -719,10 +719,10 @@ struct __pyx_obj_17OpenGL_accelerate_13a
 
 /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/arraydatatype.pyx":386
  *         return self.arrayType.asArray( incoming, arguments[ self.typeIndex ] )
- * 
+ *
  * cdef class AsArrayTyped(pyArgConverter):             # <<<<<<<<<<<<<<
  *     """Given arrayName and arrayType, convert arrayName to array of type
- * 
+ *
  */
 struct __pyx_obj_17OpenGL_accelerate_13arraydatatype_AsArrayTyped {
   struct __pyx_obj_17OpenGL_accelerate_7wrapper_pyArgConverter __pyx_base;
@@ -734,7 +734,7 @@ struct __pyx_obj_17OpenGL_accelerate_13a
 
 /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/arraydatatype.pyx":408
  *         return self.arrayType.asArray( incoming )
- * 
+ *
  * cdef class AsArrayTypedSizeChecked( AsArrayTyped ):             # <<<<<<<<<<<<<<
  *     """Size-checking version of AsArrayTyped"""
  *     cdef int size
@@ -747,7 +747,7 @@ struct __pyx_obj_17OpenGL_accelerate_13a
 
 /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/arraydatatype.pyx":430
  *         return result
- * 
+ *
  * cdef class AsArrayTypedSize(cArgConverter):             # <<<<<<<<<<<<<<
  *     """Given arrayName and arrayType, determine size of arrayName
  *     """
@@ -817,7 +817,7 @@ static struct __pyx_vtabstruct_17OpenGL_
 
 /* "OpenGL_accelerate/formathandler.pxd":3
  * """Cython import description for formathandler types"""
- * 
+ *
  * cdef class FormatHandler:             # <<<<<<<<<<<<<<
  * 	cdef public int ERROR_ON_COPY
  * 	cdef object c_from_param( self, object instance, object typeCode)
@@ -839,7 +839,7 @@ static struct __pyx_vtabstruct_17OpenGL_
 
 /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/arraydatatype.pyx":13
  *     cdef object PyDict_GetItem( object, object )
- * 
+ *
  * cdef class HandlerRegistry:             # <<<<<<<<<<<<<<
  *     """C-coded registry of format handlers for array data-formats"""
  *     cdef dict registry
@@ -855,10 +855,10 @@ static struct __pyx_vtabstruct_17OpenGL_
 
 /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/arraydatatype.pyx":108
  * cdef HandlerRegistry GLOBAL_REGISTRY = HandlerRegistry(plugins.FormatHandler.match)
- * 
+ *
  * cdef class ArrayDatatype:             # <<<<<<<<<<<<<<
  *     """Mix-in for array datatype classes
- * 
+ *
  */
 
 struct __pyx_vtabstruct_17OpenGL_accelerate_13arraydatatype_ArrayDatatype {
@@ -869,10 +869,10 @@ static struct __pyx_vtabstruct_17OpenGL_
 
 /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/arraydatatype.pyx":263
  * # Now some array helper functions...
- * 
+ *
  * cdef class Output(cArgConverter):             # <<<<<<<<<<<<<<
  *     """CConverter generating static-size typed output arrays
- * 
+ *
  */
 
 struct __pyx_vtabstruct_17OpenGL_accelerate_13arraydatatype_Output {
@@ -898,10 +898,10 @@ static struct __pyx_vtabstruct_17OpenGL_
 
 /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/arraydatatype.pyx":319
  *         return self.arrayType.c_zeros( self.c_getSize(pyArgs), self.arrayType.typeConstant )
- * 
+ *
  * cdef class SizedOutput( Output ):             # <<<<<<<<<<<<<<
  *     """Output class that looks up output size via a callable function
- * 
+ *
  */
 
 struct __pyx_vtabstruct_17OpenGL_accelerate_13arraydatatype_SizedOutput {
@@ -925,11 +925,11 @@ static struct __pyx_vtabstruct_17OpenGL_
 
 
 /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/arraydatatype.pyx":360
- * 
- * 
+ *
+ *
  * cdef class AsArrayOfType(pyArgConverter):             # <<<<<<<<<<<<<<
  *     """Given arrayName and typeName coerce arrayName to array of type typeName
- * 
+ *
  */
 
 struct __pyx_vtabstruct_17OpenGL_accelerate_13arraydatatype_AsArrayOfType {
@@ -940,10 +940,10 @@ static struct __pyx_vtabstruct_17OpenGL_
 
 /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/arraydatatype.pyx":386
  *         return self.arrayType.asArray( incoming, arguments[ self.typeIndex ] )
- * 
+ *
  * cdef class AsArrayTyped(pyArgConverter):             # <<<<<<<<<<<<<<
  *     """Given arrayName and arrayType, convert arrayName to array of type
- * 
+ *
  */
 
 struct __pyx_vtabstruct_17OpenGL_accelerate_13arraydatatype_AsArrayTyped {
@@ -954,7 +954,7 @@ static struct __pyx_vtabstruct_17OpenGL_
 
 /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/arraydatatype.pyx":408
  *         return self.arrayType.asArray( incoming )
- * 
+ *
  * cdef class AsArrayTypedSizeChecked( AsArrayTyped ):             # <<<<<<<<<<<<<<
  *     """Size-checking version of AsArrayTyped"""
  *     cdef int size
@@ -968,7 +968,7 @@ static struct __pyx_vtabstruct_17OpenGL_
 
 /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/arraydatatype.pyx":430
  *         return result
- * 
+ *
  * cdef class AsArrayTypedSize(cArgConverter):             # <<<<<<<<<<<<<<
  *     """Given arrayName and arrayType, determine size of arrayName
  *     """
@@ -1696,7 +1696,7 @@ static int __pyx_pf_17OpenGL_accelerate_
  *         self.registry[key] = value
  *     def __call__( self, value ):             # <<<<<<<<<<<<<<
  *         return self.c_lookup( value )
- * 
+ *
  */
 
 /* Python wrapper */
@@ -1764,8 +1764,8 @@ static PyObject *__pyx_pf_17OpenGL_accel
  *         self.registry[key] = value
  *     def __call__( self, value ):
  *         return self.c_lookup( value )             # <<<<<<<<<<<<<<
- * 
- * 
+ *
+ *
  */
   __Pyx_XDECREF(__pyx_r);
   __pyx_t_1 = ((struct __pyx_vtabstruct_17OpenGL_accelerate_13arraydatatype_HandlerRegistry *)__pyx_v_self->__pyx_vtab)->c_lookup(__pyx_v_self, __pyx_v_value); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
@@ -1779,7 +1779,7 @@ static PyObject *__pyx_pf_17OpenGL_accel
  *         self.registry[key] = value
  *     def __call__( self, value ):             # <<<<<<<<<<<<<<
  *         return self.c_lookup( value )
- * 
+ *
  */
 
   /* function exit code */
@@ -1794,8 +1794,8 @@ static PyObject *__pyx_pf_17OpenGL_accel
 }
 
 /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/arraydatatype.pyx":34
- * 
- * 
+ *
+ *
  *     cdef object c_lookup( self, object value ):             # <<<<<<<<<<<<<<
  *         """C-level lookup of handler for given value"""
  *         cdef object typ, handler,base
@@ -2234,7 +2234,7 @@ static PyObject *__pyx_f_17OpenGL_accele
  *                 )
  *             )
  *         return handler             # <<<<<<<<<<<<<<
- * 
+ *
  *     cdef object c_get_output_handler( self ):
  */
   __Pyx_XDECREF(__pyx_r);
@@ -2243,8 +2243,8 @@ static PyObject *__pyx_f_17OpenGL_accele
   goto __pyx_L0;
 
   /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/arraydatatype.pyx":34
- * 
- * 
+ *
+ *
  *     cdef object c_lookup( self, object value ):             # <<<<<<<<<<<<<<
  *         """C-level lookup of handler for given value"""
  *         cdef object typ, handler,base
@@ -2272,7 +2272,7 @@ static PyObject *__pyx_f_17OpenGL_accele
 
 /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/arraydatatype.pyx":64
  *         return handler
- * 
+ *
  *     cdef object c_get_output_handler( self ):             # <<<<<<<<<<<<<<
  *         """Fast-path lookup for output handler object"""
  *         if self.output_handler is None:
@@ -2480,7 +2480,7 @@ static PyObject *__pyx_f_17OpenGL_accele
 
   /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/arraydatatype.pyx":64
  *         return handler
- * 
+ *
  *     cdef object c_get_output_handler( self ):             # <<<<<<<<<<<<<<
  *         """Fast-path lookup for output handler object"""
  *         if self.output_handler is None:
@@ -2621,7 +2621,7 @@ static PyObject *__pyx_f_17OpenGL_accele
  *                 return handler()
  *         except ImportError as err:             # <<<<<<<<<<<<<<
  *             return None
- * 
+ *
  */
     __pyx_t_8 = PyErr_ExceptionMatches(__pyx_builtin_ImportError);
     if (__pyx_t_8) {
@@ -2637,7 +2637,7 @@ static PyObject *__pyx_f_17OpenGL_accele
  *                 return handler()
  *         except ImportError as err:
  *             return None             # <<<<<<<<<<<<<<
- * 
+ *
  *     def register( self, handler, types=None ):
  */
       __Pyx_XDECREF(__pyx_r);
@@ -2707,7 +2707,7 @@ static PyObject *__pyx_f_17OpenGL_accele
 
 /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/arraydatatype.pyx":88
  *             return None
- * 
+ *
  *     def register( self, handler, types=None ):             # <<<<<<<<<<<<<<
  *         """Register this class as handler for given set of types"""
  *         if not isinstance( types, (list,tuple)):
@@ -2803,9 +2803,9 @@ static PyObject *__pyx_pf_17OpenGL_accel
  *             types = [ types ]
  *         for type in types:
  */
-  __pyx_t_1 = PyList_Check(__pyx_v_types); 
+  __pyx_t_1 = PyList_Check(__pyx_v_types);
   if (!__pyx_t_1) {
-    __pyx_t_2 = PyTuple_Check(__pyx_v_types); 
+    __pyx_t_2 = PyTuple_Check(__pyx_v_types);
     __pyx_t_3 = __pyx_t_2;
   } else {
     __pyx_t_3 = __pyx_t_1;
@@ -2896,7 +2896,7 @@ static PyObject *__pyx_pf_17OpenGL_accel
  *             self.registry[ type ] = handler
  *         if handler.isOutput:             # <<<<<<<<<<<<<<
  *             self.all_output_handlers.append( handler )
- * 
+ *
  */
   __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_handler, __pyx_n_s_isOutput); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_GOTREF(__pyx_t_4);
@@ -2908,7 +2908,7 @@ static PyObject *__pyx_pf_17OpenGL_accel
  *             self.registry[ type ] = handler
  *         if handler.isOutput:
  *             self.all_output_handlers.append( handler )             # <<<<<<<<<<<<<<
- * 
+ *
  *     def registerReturn( self, handler ):
  */
     __pyx_t_8 = __Pyx_PyObject_Append(__pyx_v_self->all_output_handlers, __pyx_v_handler); if (unlikely(__pyx_t_8 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
@@ -2918,7 +2918,7 @@ static PyObject *__pyx_pf_17OpenGL_accel
 
   /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/arraydatatype.pyx":88
  *             return None
- * 
+ *
  *     def register( self, handler, types=None ):             # <<<<<<<<<<<<<<
  *         """Register this class as handler for given set of types"""
  *         if not isinstance( types, (list,tuple)):
@@ -2942,7 +2942,7 @@ static PyObject *__pyx_pf_17OpenGL_accel
 
 /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/arraydatatype.pyx":97
  *             self.all_output_handlers.append( handler )
- * 
+ *
  *     def registerReturn( self, handler ):             # <<<<<<<<<<<<<<
  *         """Register this handler as the default return-type handler"""
  *         if isinstance( handler, (str,unicode)):
@@ -2977,9 +2977,9 @@ static PyObject *__pyx_pf_17OpenGL_accel
  *             self.preferredOutput = handler
  *             self.output_handler = None
  */
-  __pyx_t_1 = PyString_Check(__pyx_v_handler); 
+  __pyx_t_1 = PyString_Check(__pyx_v_handler);
   if (!__pyx_t_1) {
-    __pyx_t_2 = PyUnicode_Check(__pyx_v_handler); 
+    __pyx_t_2 = PyUnicode_Check(__pyx_v_handler);
     __pyx_t_3 = __pyx_t_2;
   } else {
     __pyx_t_3 = __pyx_t_1;
@@ -3021,7 +3021,7 @@ static PyObject *__pyx_pf_17OpenGL_accel
  *         else:
  *             self.preferredOutput = None             # <<<<<<<<<<<<<<
  *             self.output_handler = handler
- * 
+ *
  */
     __Pyx_INCREF(Py_None);
     __Pyx_GIVEREF(Py_None);
@@ -3033,7 +3033,7 @@ static PyObject *__pyx_pf_17OpenGL_accel
  *         else:
  *             self.preferredOutput = None
  *             self.output_handler = handler             # <<<<<<<<<<<<<<
- * 
+ *
  * cdef HandlerRegistry GLOBAL_REGISTRY = HandlerRegistry(plugins.FormatHandler.match)
  */
     __Pyx_INCREF(__pyx_v_handler);
@@ -3046,7 +3046,7 @@ static PyObject *__pyx_pf_17OpenGL_accel
 
   /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/arraydatatype.pyx":97
  *             self.all_output_handlers.append( handler )
- * 
+ *
  *     def registerReturn( self, handler ):             # <<<<<<<<<<<<<<
  *         """Register this handler as the default return-type handler"""
  *         if isinstance( handler, (str,unicode)):
@@ -3161,7 +3161,7 @@ static int __pyx_pf_17OpenGL_accelerate_
  *         self.typeConstant = typeConstant
  *         self.baseType = baseType             # <<<<<<<<<<<<<<
  *         self.handler = GLOBAL_REGISTRY
- * 
+ *
  */
   __Pyx_INCREF(__pyx_v_baseType);
   __Pyx_GIVEREF(__pyx_v_baseType);
@@ -3173,7 +3173,7 @@ static int __pyx_pf_17OpenGL_accelerate_
  *         self.typeConstant = typeConstant
  *         self.baseType = baseType
  *         self.handler = GLOBAL_REGISTRY             # <<<<<<<<<<<<<<
- * 
+ *
  *     def getRegistry( self ):
  */
   __Pyx_INCREF(((PyObject *)__pyx_v_17OpenGL_accelerate_13arraydatatype_GLOBAL_REGISTRY));
@@ -3198,7 +3198,7 @@ static int __pyx_pf_17OpenGL_accelerate_
 
 /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/arraydatatype.pyx":125
  *         self.handler = GLOBAL_REGISTRY
- * 
+ *
  *     def getRegistry( self ):             # <<<<<<<<<<<<<<
  *         """Get our handler registry"""
  *         return self.handler
@@ -3237,7 +3237,7 @@ static PyObject *__pyx_pf_17OpenGL_accel
 
   /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/arraydatatype.pyx":125
  *         self.handler = GLOBAL_REGISTRY
- * 
+ *
  *     def getRegistry( self ):             # <<<<<<<<<<<<<<
  *         """Get our handler registry"""
  *         return self.handler
@@ -3255,7 +3255,7 @@ static PyObject *__pyx_pf_17OpenGL_accel
  *         return self.handler
  *     def getHandler( self, value ):             # <<<<<<<<<<<<<<
  *         """Retrieve FormatHandler for given value
- * 
+ *
  */
 
 /* Python wrapper */
@@ -3285,7 +3285,7 @@ static PyObject *__pyx_pf_17OpenGL_accel
  *         once the registry is initialized...
  *         """
  *         return self.handler.c_lookup( value )             # <<<<<<<<<<<<<<
- * 
+ *
  *     def from_param( self, object value, object typeConstant=None ):
  */
   __Pyx_XDECREF(__pyx_r);
@@ -3300,7 +3300,7 @@ static PyObject *__pyx_pf_17OpenGL_accel
  *         return self.handler
  *     def getHandler( self, value ):             # <<<<<<<<<<<<<<
  *         """Retrieve FormatHandler for given value
- * 
+ *
  */
 
   /* function exit code */
@@ -3316,7 +3316,7 @@ static PyObject *__pyx_pf_17OpenGL_accel
 
 /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/arraydatatype.pyx":136
  *         return self.handler.c_lookup( value )
- * 
+ *
  *     def from_param( self, object value, object typeConstant=None ):             # <<<<<<<<<<<<<<
  *         """Given a value in a known data-pointer type, convert to a ctypes pointer"""
  *         handler = self.handler.c_lookup( value )
@@ -3420,7 +3420,7 @@ static PyObject *__pyx_pf_17OpenGL_accel
  *             return (<FormatHandler>handler).c_from_param(
  *                 value, typeConstant or self.typeConstant
  */
-  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_handler, ((PyObject*)__pyx_ptype_17OpenGL_accelerate_13formathandler_FormatHandler)); 
+  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_handler, ((PyObject*)__pyx_ptype_17OpenGL_accelerate_13formathandler_FormatHandler));
   __pyx_t_3 = (__pyx_t_2 != 0);
   if (__pyx_t_3) {
 
@@ -3468,7 +3468,7 @@ static PyObject *__pyx_pf_17OpenGL_accel
  *                 value, typeConstant or self.typeConstant
  *             )
  *         return handler.from_param( value, typeConstant or self.typeConstant )             # <<<<<<<<<<<<<<
- * 
+ *
  *     def __call__( self, object value ):
  */
   __Pyx_XDECREF(__pyx_r);
@@ -3500,7 +3500,7 @@ static PyObject *__pyx_pf_17OpenGL_accel
 
   /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/arraydatatype.pyx":136
  *         return self.handler.c_lookup( value )
- * 
+ *
  *     def from_param( self, object value, object typeConstant=None ):             # <<<<<<<<<<<<<<
  *         """Given a value in a known data-pointer type, convert to a ctypes pointer"""
  *         handler = self.handler.c_lookup( value )
@@ -3522,7 +3522,7 @@ static PyObject *__pyx_pf_17OpenGL_accel
 
 /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/arraydatatype.pyx":145
  *         return handler.from_param( value, typeConstant or self.typeConstant )
- * 
+ *
  *     def __call__( self, object value ):             # <<<<<<<<<<<<<<
  *         """We cannot simply reference from_param as under Python 2.7 that makes us non-callable"""
  *         return self.from_param( value )
@@ -3599,7 +3599,7 @@ static PyObject *__pyx_pf_17OpenGL_accel
  *     def __call__( self, object value ):
  *         """We cannot simply reference from_param as under Python 2.7 that makes us non-callable"""
  *         return self.from_param( value )             # <<<<<<<<<<<<<<
- * 
+ *
  *     def dataPointer( self, value ):
  */
   __Pyx_XDECREF(__pyx_r);
@@ -3620,7 +3620,7 @@ static PyObject *__pyx_pf_17OpenGL_accel
 
   /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/arraydatatype.pyx":145
  *         return handler.from_param( value, typeConstant or self.typeConstant )
- * 
+ *
  *     def __call__( self, object value ):             # <<<<<<<<<<<<<<
  *         """We cannot simply reference from_param as under Python 2.7 that makes us non-callable"""
  *         return self.from_param( value )
@@ -3641,7 +3641,7 @@ static PyObject *__pyx_pf_17OpenGL_accel
 
 /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/arraydatatype.pyx":149
  *         return self.from_param( value )
- * 
+ *
  *     def dataPointer( self, value ):             # <<<<<<<<<<<<<<
  *         """Given a value in a known data-pointer type, return long for pointer"""
  *         handler = self.handler.c_lookup( value )
@@ -3694,7 +3694,7 @@ static PyObject *__pyx_pf_17OpenGL_accel
  *             return (<FormatHandler>handler).c_dataPointer(
  *                 value
  */
-  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_handler, ((PyObject*)__pyx_ptype_17OpenGL_accelerate_13formathandler_FormatHandler)); 
+  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_handler, ((PyObject*)__pyx_ptype_17OpenGL_accelerate_13formathandler_FormatHandler));
   __pyx_t_3 = (__pyx_t_2 != 0);
   if (__pyx_t_3) {
 
@@ -3746,7 +3746,7 @@ static PyObject *__pyx_pf_17OpenGL_accel
 
   /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/arraydatatype.pyx":149
  *         return self.from_param( value )
- * 
+ *
  *     def dataPointer( self, value ):             # <<<<<<<<<<<<<<
  *         """Given a value in a known data-pointer type, return long for pointer"""
  *         handler = self.handler.c_lookup( value )
@@ -4230,7 +4230,7 @@ static PyObject *__pyx_pf_17OpenGL_accel
  *             return (<FormatHandler>handler).c_asArray(
  *                 value, typeCode
  */
-  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_handler, ((PyObject*)__pyx_ptype_17OpenGL_accelerate_13formathandler_FormatHandler)); 
+  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_handler, ((PyObject*)__pyx_ptype_17OpenGL_accelerate_13formathandler_FormatHandler));
   __pyx_t_1 = (__pyx_t_2 != 0);
   if (__pyx_t_1) {
 
@@ -4327,7 +4327,7 @@ static PyObject *__pyx_pf_17OpenGL_accel
  *         )
  *     def arrayToGLType( self, value ):             # <<<<<<<<<<<<<<
  *         """Given a data-value, guess the OpenGL type of the corresponding pointer
- * 
+ *
  */
 
 /* Python wrapper */
@@ -4386,7 +4386,7 @@ static PyObject *__pyx_pf_17OpenGL_accel
  *         )
  *     def arrayToGLType( self, value ):             # <<<<<<<<<<<<<<
  *         """Given a data-value, guess the OpenGL type of the corresponding pointer
- * 
+ *
  */
 
   /* function exit code */
@@ -4535,7 +4535,7 @@ static PyObject *__pyx_pf_17OpenGL_accel
  *             return (<FormatHandler>handler).c_arraySize(
  *                 value, typeCode
  */
-  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_handler, ((PyObject*)__pyx_ptype_17OpenGL_accelerate_13formathandler_FormatHandler)); 
+  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_handler, ((PyObject*)__pyx_ptype_17OpenGL_accelerate_13formathandler_FormatHandler));
   __pyx_t_1 = (__pyx_t_2 != 0);
   if (__pyx_t_1) {
 
@@ -4632,7 +4632,7 @@ static PyObject *__pyx_pf_17OpenGL_accel
  *         )
  *     def unitSize( self, value, typeCode=None ):             # <<<<<<<<<<<<<<
  *         """Determine unit size of an array (if possible)
- * 
+ *
  */
 
 /* Python wrapper */
@@ -4760,7 +4760,7 @@ static PyObject *__pyx_pf_17OpenGL_accel
  *             return (<FormatHandler>handler).c_unitSize(
  *                 value, typeCode
  */
-  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_handler, ((PyObject*)__pyx_ptype_17OpenGL_accelerate_13formathandler_FormatHandler)); 
+  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_handler, ((PyObject*)__pyx_ptype_17OpenGL_accelerate_13formathandler_FormatHandler));
   __pyx_t_1 = (__pyx_t_2 != 0);
   if (__pyx_t_1) {
 
@@ -4834,7 +4834,7 @@ static PyObject *__pyx_pf_17OpenGL_accel
  *         )
  *     def unitSize( self, value, typeCode=None ):             # <<<<<<<<<<<<<<
  *         """Determine unit size of an array (if possible)
- * 
+ *
  */
 
   /* function exit code */
@@ -5099,7 +5099,7 @@ static PyObject *__pyx_f_17OpenGL_accele
  *             return (<FormatHandler>handler).c_zeros(
  *                 dims, typeCode
  */
-  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_handler, ((PyObject*)__pyx_ptype_17OpenGL_accelerate_13formathandler_FormatHandler)); 
+  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_handler, ((PyObject*)__pyx_ptype_17OpenGL_accelerate_13formathandler_FormatHandler));
   __pyx_t_1 = (__pyx_t_2 != 0);
   if (__pyx_t_1) {
 
@@ -5141,8 +5141,8 @@ static PyObject *__pyx_f_17OpenGL_accele
  *         return handler.zeros(
  *             dims, typeCode
  *         )             # <<<<<<<<<<<<<<
- * 
- * 
+ *
+ *
  */
   __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 231; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_GOTREF(__pyx_t_4);
@@ -5192,8 +5192,8 @@ static PyObject *__pyx_f_17OpenGL_accele
 }
 
 /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/arraydatatype.pyx":236
- * 
- * 
+ *
+ *
  *     def dimensions( self, value, typeCode=None ):             # <<<<<<<<<<<<<<
  *         """Given a data-value, get the dimensions (assumes full structure info)"""
  *         if typeCode is None:
@@ -5324,7 +5324,7 @@ static PyObject *__pyx_pf_17OpenGL_accel
  *             return (<FormatHandler>handler).c_dimensions(
  *                 value
  */
-  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_handler, ((PyObject*)__pyx_ptype_17OpenGL_accelerate_13formathandler_FormatHandler)); 
+  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_handler, ((PyObject*)__pyx_ptype_17OpenGL_accelerate_13formathandler_FormatHandler));
   __pyx_t_1 = (__pyx_t_2 != 0);
   if (__pyx_t_1) {
 
@@ -5342,7 +5342,7 @@ static PyObject *__pyx_pf_17OpenGL_accel
  *                 value
  *             )             # <<<<<<<<<<<<<<
  *         return handler.dimensions( value )
- * 
+ *
  */
     __pyx_t_3 = ((struct __pyx_vtabstruct_17OpenGL_accelerate_13formathandler_FormatHandler *)((struct __pyx_obj_17OpenGL_accelerate_13formathandler_FormatHandler *)__pyx_v_handler)->__pyx_vtab)->c_dimensions(((struct __pyx_obj_17OpenGL_accelerate_13formathandler_FormatHandler *)__pyx_v_handler), __pyx_v_value); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
     __Pyx_GOTREF(__pyx_t_3);
@@ -5355,7 +5355,7 @@ static PyObject *__pyx_pf_17OpenGL_accel
  *                 value
  *             )
  *         return handler.dimensions( value )             # <<<<<<<<<<<<<<
- * 
+ *
  *     def arrayByteCount( self, value, typeCode=None ):
  */
   __Pyx_XDECREF(__pyx_r);
@@ -5375,8 +5375,8 @@ static PyObject *__pyx_pf_17OpenGL_accel
   goto __pyx_L0;
 
   /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/arraydatatype.pyx":236
- * 
- * 
+ *
+ *
  *     def dimensions( self, value, typeCode=None ):             # <<<<<<<<<<<<<<
  *         """Given a data-value, get the dimensions (assumes full structure info)"""
  *         if typeCode is None:
@@ -5399,10 +5399,10 @@ static PyObject *__pyx_pf_17OpenGL_accel
 
 /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/arraydatatype.pyx":247
  *         return handler.dimensions( value )
- * 
+ *
  *     def arrayByteCount( self, value, typeCode=None ):             # <<<<<<<<<<<<<<
  *         """Given a data-value, try to determine number of bytes it's final form occupies
- * 
+ *
  */
 
 /* Python wrapper */
@@ -5530,7 +5530,7 @@ static PyObject *__pyx_pf_17OpenGL_accel
  *             return (<FormatHandler>handler).c_arrayByteCount(
  *                 value
  */
-  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_handler, ((PyObject*)__pyx_ptype_17OpenGL_accelerate_13formathandler_FormatHandler)); 
+  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_handler, ((PyObject*)__pyx_ptype_17OpenGL_accelerate_13formathandler_FormatHandler));
   __pyx_t_1 = (__pyx_t_2 != 0);
   if (__pyx_t_1) {
 
@@ -5548,7 +5548,7 @@ static PyObject *__pyx_pf_17OpenGL_accel
  *                 value
  *             )             # <<<<<<<<<<<<<<
  *         return handler.arrayByteCount( value )
- * 
+ *
  */
     __pyx_t_3 = ((struct __pyx_vtabstruct_17OpenGL_accelerate_13formathandler_FormatHandler *)((struct __pyx_obj_17OpenGL_accelerate_13formathandler_FormatHandler *)__pyx_v_handler)->__pyx_vtab)->c_arrayByteCount(((struct __pyx_obj_17OpenGL_accelerate_13formathandler_FormatHandler *)__pyx_v_handler), __pyx_v_value); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
     __Pyx_GOTREF(__pyx_t_3);
@@ -5561,7 +5561,7 @@ static PyObject *__pyx_pf_17OpenGL_accel
  *                 value
  *             )
  *         return handler.arrayByteCount( value )             # <<<<<<<<<<<<<<
- * 
+ *
  * # Now some array helper functions...
  */
   __Pyx_XDECREF(__pyx_r);
@@ -5582,10 +5582,10 @@ static PyObject *__pyx_pf_17OpenGL_accel
 
   /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/arraydatatype.pyx":247
  *         return handler.dimensions( value )
- * 
+ *
  *     def arrayByteCount( self, value, typeCode=None ):             # <<<<<<<<<<<<<<
  *         """Given a data-value, try to determine number of bytes it's final form occupies
- * 
+ *
  */
 
   /* function exit code */
@@ -5941,7 +5941,7 @@ static int __pyx_pf_17OpenGL_accelerate_
  *         self.arrayType = arrayType
  *     def finalise( self, wrapper ):             # <<<<<<<<<<<<<<
  *         self.outIndex = wrapper.cArgIndex( self.name )
- * 
+ *
  */
 
 /* Python wrapper */
@@ -5973,7 +5973,7 @@ static PyObject *__pyx_pf_17OpenGL_accel
  *         self.arrayType = arrayType
  *     def finalise( self, wrapper ):
  *         self.outIndex = wrapper.cArgIndex( self.name )             # <<<<<<<<<<<<<<
- * 
+ *
  *     cdef tuple c_getSize( self, tuple pyArgs ):
  */
   __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_wrapper, __pyx_n_s_cArgIndex); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 286; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
@@ -5996,7 +5996,7 @@ static PyObject *__pyx_pf_17OpenGL_accel
  *         self.arrayType = arrayType
  *     def finalise( self, wrapper ):             # <<<<<<<<<<<<<<
  *         self.outIndex = wrapper.cArgIndex( self.name )
- * 
+ *
  */
 
   /* function exit code */
@@ -6016,7 +6016,7 @@ static PyObject *__pyx_pf_17OpenGL_accel
 
 /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/arraydatatype.pyx":288
  *         self.outIndex = wrapper.cArgIndex( self.name )
- * 
+ *
  *     cdef tuple c_getSize( self, tuple pyArgs ):             # <<<<<<<<<<<<<<
  *         """Retrieve the array size for this argument"""
  *         return self.size
@@ -6031,7 +6031,7 @@ static PyObject *__pyx_f_17OpenGL_accele
  *     cdef tuple c_getSize( self, tuple pyArgs ):
  *         """Retrieve the array size for this argument"""
  *         return self.size             # <<<<<<<<<<<<<<
- * 
+ *
  *     cdef object c_call( self, tuple pyArgs, int index, object baseOperation ):
  */
   __Pyx_XDECREF(__pyx_r);
@@ -6041,7 +6041,7 @@ static PyObject *__pyx_f_17OpenGL_accele
 
   /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/arraydatatype.pyx":288
  *         self.outIndex = wrapper.cArgIndex( self.name )
- * 
+ *
  *     cdef tuple c_getSize( self, tuple pyArgs ):             # <<<<<<<<<<<<<<
  *         """Retrieve the array size for this argument"""
  *         return self.size
@@ -6056,7 +6056,7 @@ static PyObject *__pyx_f_17OpenGL_accele
 
 /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/arraydatatype.pyx":292
  *         return self.size
- * 
+ *
  *     cdef object c_call( self, tuple pyArgs, int index, object baseOperation ):             # <<<<<<<<<<<<<<
  *         """Return pyArgs[ self.index ]"""
  *         return self.arrayType.c_zeros( self.c_getSize(pyArgs), self.arrayType.typeConstant )
@@ -6077,7 +6077,7 @@ static PyObject *__pyx_f_17OpenGL_accele
  *     cdef object c_call( self, tuple pyArgs, int index, object baseOperation ):
  *         """Return pyArgs[ self.index ]"""
  *         return self.arrayType.c_zeros( self.c_getSize(pyArgs), self.arrayType.typeConstant )             # <<<<<<<<<<<<<<
- * 
+ *
  *     def oldStyleReturn( self, object result, object baseOperation, tuple pyArgs, tuple cArgs ):
  */
   __Pyx_XDECREF(__pyx_r);
@@ -6095,7 +6095,7 @@ static PyObject *__pyx_f_17OpenGL_accele
 
   /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/arraydatatype.pyx":292
  *         return self.size
- * 
+ *
  *     cdef object c_call( self, tuple pyArgs, int index, object baseOperation ):             # <<<<<<<<<<<<<<
  *         """Return pyArgs[ self.index ]"""
  *         return self.arrayType.c_zeros( self.c_getSize(pyArgs), self.arrayType.typeConstant )
@@ -6116,7 +6116,7 @@ static PyObject *__pyx_f_17OpenGL_accele
 
 /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/arraydatatype.pyx":296
  *         return self.arrayType.c_zeros( self.c_getSize(pyArgs), self.arrayType.typeConstant )
- * 
+ *
  *     def oldStyleReturn( self, object result, object baseOperation, tuple pyArgs, tuple cArgs ):             # <<<<<<<<<<<<<<
  *         """Retrieve cArgs[ self.index ]"""
  *         #TODO: make this a c_api-bearing value, not a Python function call
@@ -6462,7 +6462,7 @@ static PyObject *__pyx_pf_17OpenGL_accel
 
   /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/arraydatatype.pyx":296
  *         return self.arrayType.c_zeros( self.c_getSize(pyArgs), self.arrayType.typeConstant )
- * 
+ *
  *     def oldStyleReturn( self, object result, object baseOperation, tuple pyArgs, tuple cArgs ):             # <<<<<<<<<<<<<<
  *         """Retrieve cArgs[ self.index ]"""
  *         #TODO: make this a c_api-bearing value, not a Python function call
@@ -6531,7 +6531,7 @@ static PyObject *__pyx_f_17OpenGL_accele
  *         if pyArgs[index] not in DO_OUTPUT:
  *             return self.arrayType.asArray( pyArgs[index] )             # <<<<<<<<<<<<<<
  *         return self.arrayType.c_zeros( self.c_getSize(pyArgs), self.arrayType.typeConstant )
- * 
+ *
  */
     __Pyx_XDECREF(__pyx_r);
     __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->__pyx_base.arrayType), __pyx_n_s_asArray); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
@@ -6560,7 +6560,7 @@ static PyObject *__pyx_f_17OpenGL_accele
  *         if pyArgs[index] not in DO_OUTPUT:
  *             return self.arrayType.asArray( pyArgs[index] )
  *         return self.arrayType.c_zeros( self.c_getSize(pyArgs), self.arrayType.typeConstant )             # <<<<<<<<<<<<<<
- * 
+ *
  * cdef class SizedOutput( Output ):
  */
   __Pyx_XDECREF(__pyx_r);
@@ -6599,7 +6599,7 @@ static PyObject *__pyx_f_17OpenGL_accele
 
 /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/arraydatatype.pyx":329
  *     cdef int index
- * 
+ *
  *     def __init__( self, str name, str specifier, object lookup, ArrayDatatype arrayType ):             # <<<<<<<<<<<<<<
  *         super( SizedOutput,self).__init__( name, None, arrayType )
  *         self.specifier = specifier
@@ -6703,7 +6703,7 @@ static int __pyx_pf_17OpenGL_accelerate_
   __Pyx_RefNannySetupContext("__init__", 0);
 
   /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/arraydatatype.pyx":330
- * 
+ *
  *     def __init__( self, str name, str specifier, object lookup, ArrayDatatype arrayType ):
  *         super( SizedOutput,self).__init__( name, None, arrayType )             # <<<<<<<<<<<<<<
  *         self.specifier = specifier
@@ -6781,7 +6781,7 @@ static int __pyx_pf_17OpenGL_accelerate_
 
   /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/arraydatatype.pyx":329
  *     cdef int index
- * 
+ *
  *     def __init__( self, str name, str specifier, object lookup, ArrayDatatype arrayType ):             # <<<<<<<<<<<<<<
  *         super( SizedOutput,self).__init__( name, None, arrayType )
  *         self.specifier = specifier
@@ -7015,7 +7015,7 @@ static PyObject *__pyx_f_17OpenGL_accele
  *                     result = (result,)
  *                 return result
  */
-          __pyx_t_9 = PyTuple_Check(__pyx_v_result); 
+          __pyx_t_9 = PyTuple_Check(__pyx_v_result);
           __pyx_t_10 = ((!(__pyx_t_9 != 0)) != 0);
           if (__pyx_t_10) {
 
@@ -7295,7 +7295,7 @@ static PyObject *__pyx_f_17OpenGL_accele
  *         if pyArgs[index] is not DO_OUTPUT[0] and pyArgs[index] is not DO_OUTPUT[1]:
  *             return self.arrayType.asArray( pyArgs[index] )             # <<<<<<<<<<<<<<
  *         return self.arrayType.c_zeros( self.c_getSize(pyArgs), self.arrayType.typeConstant )
- * 
+ *
  */
     __Pyx_XDECREF(__pyx_r);
     __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->__pyx_base.__pyx_base.arrayType), __pyx_n_s_asArray); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
@@ -7324,8 +7324,8 @@ static PyObject *__pyx_f_17OpenGL_accele
  *         if pyArgs[index] is not DO_OUTPUT[0] and pyArgs[index] is not DO_OUTPUT[1]:
  *             return self.arrayType.asArray( pyArgs[index] )
  *         return self.arrayType.c_zeros( self.c_getSize(pyArgs), self.arrayType.typeConstant )             # <<<<<<<<<<<<<<
- * 
- * 
+ *
+ *
  */
   __Pyx_XDECREF(__pyx_r);
   __pyx_t_3 = ((struct __pyx_vtabstruct_17OpenGL_accelerate_13arraydatatype_SizedOutputOrInput *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.c_getSize(((struct __pyx_obj_17OpenGL_accelerate_13arraydatatype_Output *)__pyx_v_self), __pyx_v_pyArgs); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 357; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
@@ -7363,7 +7363,7 @@ static PyObject *__pyx_f_17OpenGL_accele
 
 /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/arraydatatype.pyx":374
  *     cdef public ArrayDatatype arrayType
- * 
+ *
  *     def __init__( self, str arrayName='pointer', str typeName='type' ):             # <<<<<<<<<<<<<<
  *         self.arrayName = arrayName
  *         self.typeName = typeName
@@ -7454,7 +7454,7 @@ static int __pyx_pf_17OpenGL_accelerate_
   __Pyx_RefNannySetupContext("__init__", 0);
 
   /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/arraydatatype.pyx":375
- * 
+ *
  *     def __init__( self, str arrayName='pointer', str typeName='type' ):
  *         self.arrayName = arrayName             # <<<<<<<<<<<<<<
  *         self.typeName = typeName
@@ -7519,7 +7519,7 @@ static int __pyx_pf_17OpenGL_accelerate_
 
   /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/arraydatatype.pyx":374
  *     cdef public ArrayDatatype arrayType
- * 
+ *
  *     def __init__( self, str arrayName='pointer', str typeName='type' ):             # <<<<<<<<<<<<<<
  *         self.arrayName = arrayName
  *         self.typeName = typeName
@@ -7662,7 +7662,7 @@ static PyObject *__pyx_f_17OpenGL_accele
  *     cdef object c_call( self, object incoming, object function, tuple arguments ):
  *         """Get the arg as an array of the appropriate type"""
  *         return self.arrayType.asArray( incoming, arguments[ self.typeIndex ] )             # <<<<<<<<<<<<<<
- * 
+ *
  * cdef class AsArrayTyped(pyArgConverter):
  */
   __Pyx_XDECREF(__pyx_r);
@@ -7716,7 +7716,7 @@ static PyObject *__pyx_f_17OpenGL_accele
  *     """
  *     cdef public str arrayName             # <<<<<<<<<<<<<<
  *     cdef public str typeName
- * 
+ *
  */
 
 /* Python wrapper */
@@ -7823,7 +7823,7 @@ static int __pyx_pf_17OpenGL_accelerate_
  *     """
  *     cdef public str arrayName
  *     cdef public str typeName             # <<<<<<<<<<<<<<
- * 
+ *
  *     cdef int arrayIndex
  */
 
@@ -7931,7 +7931,7 @@ static int __pyx_pf_17OpenGL_accelerate_
  *     cdef int arrayIndex
  *     cdef int typeIndex
  *     cdef public ArrayDatatype arrayType             # <<<<<<<<<<<<<<
- * 
+ *
  *     def __init__( self, str arrayName='pointer', str typeName='type' ):
  */
 
@@ -8282,7 +8282,7 @@ static PyObject *__pyx_f_17OpenGL_accele
  *     cdef object c_call( self, object incoming, object function, tuple arguments ):
  *         """Get the arg as an array of the appropriate type"""
  *         return self.arrayType.asArray( incoming )             # <<<<<<<<<<<<<<
- * 
+ *
  * cdef class AsArrayTypedSizeChecked( AsArrayTyped ):
  */
   __Pyx_XDECREF(__pyx_r);
@@ -8873,7 +8873,7 @@ static PyObject *__pyx_f_17OpenGL_accele
  *                 incoming,
  *             )
  *         return result             # <<<<<<<<<<<<<<
- * 
+ *
  * cdef class AsArrayTypedSize(cArgConverter):
  */
   __Pyx_XDECREF(__pyx_r);
@@ -8905,7 +8905,7 @@ static PyObject *__pyx_f_17OpenGL_accele
 
 /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/arraydatatype.pyx":437
  *     cdef public ArrayDatatype arrayType
- * 
+ *
  *     def __init__( self, arrayName='pointer', arrayType=None ):             # <<<<<<<<<<<<<<
  *         self.arrayName = arrayName
  *         if arrayType is None:
@@ -8993,7 +8993,7 @@ static int __pyx_pf_17OpenGL_accelerate_
   __Pyx_INCREF(__pyx_v_arrayType);
 
   /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/arraydatatype.pyx":438
- * 
+ *
  *     def __init__( self, arrayName='pointer', arrayType=None ):
  *         self.arrayName = arrayName             # <<<<<<<<<<<<<<
  *         if arrayType is None:
@@ -9072,7 +9072,7 @@ static int __pyx_pf_17OpenGL_accelerate_
 
   /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/arraydatatype.pyx":437
  *     cdef public ArrayDatatype arrayType
- * 
+ *
  *     def __init__( self, arrayName='pointer', arrayType=None ):             # <<<<<<<<<<<<<<
  *         self.arrayName = arrayName
  *         if arrayType is None:
@@ -9176,7 +9176,7 @@ static PyObject *__pyx_pf_17OpenGL_accel
  *         self.arrayIndex = wrapper.pyArgIndex( self.arrayName )
  *     cdef c_call( self, tuple pyArgs, int index, object wrappedOperation ):             # <<<<<<<<<<<<<<
  *         return self.arrayType.arraySize( pyArgs[self.arrayIndex ] )
- * 
+ *
  */
 
 static PyObject *__pyx_f_17OpenGL_accelerate_13arraydatatype_16AsArrayTypedSize_c_call(struct __pyx_obj_17OpenGL_accelerate_13arraydatatype_AsArrayTypedSize *__pyx_v_self, PyObject *__pyx_v_pyArgs, CYTHON_UNUSED int __pyx_v_index, CYTHON_UNUSED PyObject *__pyx_v_wrappedOperation) {
@@ -9194,7 +9194,7 @@ static PyObject *__pyx_f_17OpenGL_accele
  *         self.arrayIndex = wrapper.pyArgIndex( self.arrayName )
  *     cdef c_call( self, tuple pyArgs, int index, object wrappedOperation ):
  *         return self.arrayType.arraySize( pyArgs[self.arrayIndex ] )             # <<<<<<<<<<<<<<
- * 
+ *
  */
   __Pyx_XDECREF(__pyx_r);
   __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->arrayType), __pyx_n_s_arraySize); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 446; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
@@ -9223,7 +9223,7 @@ static PyObject *__pyx_f_17OpenGL_accele
  *         self.arrayIndex = wrapper.pyArgIndex( self.arrayName )
  *     cdef c_call( self, tuple pyArgs, int index, object wrappedOperation ):             # <<<<<<<<<<<<<<
  *         return self.arrayType.arraySize( pyArgs[self.arrayIndex ] )
- * 
+ *
  */
 
   /* function exit code */
@@ -9351,7 +9351,7 @@ static int __pyx_pf_17OpenGL_accelerate_
  *     cdef public str arrayName
  *     cdef int arrayIndex
  *     cdef public ArrayDatatype arrayType             # <<<<<<<<<<<<<<
- * 
+ *
  *     def __init__( self, arrayName='pointer', arrayType=None ):
  */
 
@@ -11135,9 +11135,9 @@ PyMODINIT_FUNC PyInit_arraydatatype(void
 
   /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/arraydatatype.pyx":106
  *             self.output_handler = handler
- * 
+ *
  * cdef HandlerRegistry GLOBAL_REGISTRY = HandlerRegistry(plugins.FormatHandler.match)             # <<<<<<<<<<<<<<
- * 
+ *
  * cdef class ArrayDatatype:
  */
   __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_plugins); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
@@ -11391,9 +11391,9 @@ static void __Pyx_RaiseArgtupleInvalid(
 static CYTHON_INLINE void __Pyx_ExceptionSave(PyObject **type, PyObject **value, PyObject **tb) {
 #if CYTHON_COMPILING_IN_CPYTHON
     PyThreadState *tstate = PyThreadState_GET();
-    *type = tstate->exc_type;
-    *value = tstate->exc_value;
-    *tb = tstate->exc_traceback;
+    *type = tstate->curexc_type;
+    *value = tstate->curexc_value;
+    *tb = tstate->curexc_traceback;
     Py_XINCREF(*type);
     Py_XINCREF(*value);
     Py_XINCREF(*tb);
@@ -11405,12 +11405,12 @@ static void __Pyx_ExceptionReset(PyObjec
 #if CYTHON_COMPILING_IN_CPYTHON
     PyObject *tmp_type, *tmp_value, *tmp_tb;
     PyThreadState *tstate = PyThreadState_GET();
-    tmp_type = tstate->exc_type;
-    tmp_value = tstate->exc_value;
-    tmp_tb = tstate->exc_traceback;
-    tstate->exc_type = type;
-    tstate->exc_value = value;
-    tstate->exc_traceback = tb;
+    tmp_type = tstate->curexc_type;
+    tmp_value = tstate->curexc_value;
+    tmp_tb = tstate->curexc_traceback;
+    tstate->curexc_type = type;
+    tstate->curexc_value = value;
+    tstate->curexc_traceback = tb;
     Py_XDECREF(tmp_type);
     Py_XDECREF(tmp_value);
     Py_XDECREF(tmp_tb);
@@ -11453,12 +11453,12 @@ static int __Pyx_GetException(PyObject *
     *value = local_value;
     *tb = local_tb;
 #if CYTHON_COMPILING_IN_CPYTHON
-    tmp_type = tstate->exc_type;
-    tmp_value = tstate->exc_value;
-    tmp_tb = tstate->exc_traceback;
-    tstate->exc_type = local_type;
-    tstate->exc_value = local_value;
-    tstate->exc_traceback = local_tb;
+    tmp_type = tstate->curexc_type;
+    tmp_value = tstate->curexc_value;
+    tmp_tb = tstate->curexc_traceback;
+    tstate->curexc_type = local_type;
+    tstate->curexc_value = local_value;
+    tstate->curexc_traceback = local_tb;
     Py_XDECREF(tmp_type);
     Py_XDECREF(tmp_value);
     Py_XDECREF(tmp_tb);
Index: Downloads/PyOpenGL-accelerate-3.1.0/src/buffers_formathandler.c
===================================================================
--- Downloads.orig/PyOpenGL-accelerate-3.1.0/src/buffers_formathandler.c
+++ Downloads/PyOpenGL-accelerate-3.1.0/src/buffers_formathandler.c
@@ -534,7 +534,7 @@ struct __pyx_obj_17OpenGL_accelerate_21b
 
 /* "OpenGL_accelerate/formathandler.pxd":3
  * """Cython import description for formathandler types"""
- * 
+ *
  * cdef class FormatHandler:             # <<<<<<<<<<<<<<
  * 	cdef public int ERROR_ON_COPY
  * 	cdef object c_from_param( self, object instance, object typeCode)
@@ -548,7 +548,7 @@ struct __pyx_obj_17OpenGL_accelerate_13f
 
 /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/buffers_formathandler.pyx":50
  *     Py_buffer *PyMemoryView_GET_BUFFER(object obj)
- * 
+ *
  * cdef class MemoryviewHandler(FormatHandler):             # <<<<<<<<<<<<<<
  *     cdef public dict array_to_gl_constant
  *     cdef public dict gl_constant_to_array
@@ -563,7 +563,7 @@ struct __pyx_obj_17OpenGL_accelerate_21b
 
 /* "OpenGL_accelerate/formathandler.pxd":3
  * """Cython import description for formathandler types"""
- * 
+ *
  * cdef class FormatHandler:             # <<<<<<<<<<<<<<
  * 	cdef public int ERROR_ON_COPY
  * 	cdef object c_from_param( self, object instance, object typeCode)
@@ -585,7 +585,7 @@ static struct __pyx_vtabstruct_17OpenGL_
 
 /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/buffers_formathandler.pyx":50
  *     Py_buffer *PyMemoryView_GET_BUFFER(object obj)
- * 
+ *
  * cdef class MemoryviewHandler(FormatHandler):             # <<<<<<<<<<<<<<
  *     cdef public dict array_to_gl_constant
  *     cdef public dict gl_constant_to_array
@@ -898,7 +898,7 @@ static PyObject *__pyx_tuple__3;
 
 /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/buffers_formathandler.pyx":55
  *     isOutput = True
- * 
+ *
  *     def __init__( self, ERROR_ON_COPY=None, a_to_gl=None ):             # <<<<<<<<<<<<<<
  *         if ERROR_ON_COPY is None:
  *             from OpenGL import _configflags
@@ -995,7 +995,7 @@ static int __pyx_pf_17OpenGL_accelerate_
   __Pyx_INCREF(__pyx_v_a_to_gl);
 
   /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/buffers_formathandler.pyx":56
- * 
+ *
  *     def __init__( self, ERROR_ON_COPY=None, a_to_gl=None ):
  *         if ERROR_ON_COPY is None:             # <<<<<<<<<<<<<<
  *             from OpenGL import _configflags
@@ -1164,7 +1164,7 @@ static int __pyx_pf_17OpenGL_accelerate_
  *             a_to_gl = ARRAY_TO_GL_TYPE_MAPPING
  *         self.ERROR_ON_COPY = ERROR_ON_COPY             # <<<<<<<<<<<<<<
  *         self.array_to_gl_constant = a_to_gl
- * 
+ *
  */
   __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_v_ERROR_ON_COPY); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __pyx_v_self->__pyx_base.ERROR_ON_COPY = __pyx_t_8;
@@ -1173,7 +1173,7 @@ static int __pyx_pf_17OpenGL_accelerate_
  *             a_to_gl = ARRAY_TO_GL_TYPE_MAPPING
  *         self.ERROR_ON_COPY = ERROR_ON_COPY
  *         self.array_to_gl_constant = a_to_gl             # <<<<<<<<<<<<<<
- * 
+ *
  *     cdef object c_as_memoryview( self, object instance ):
  */
   if (!(likely(PyDict_CheckExact(__pyx_v_a_to_gl))||((__pyx_v_a_to_gl) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_v_a_to_gl)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
@@ -1187,7 +1187,7 @@ static int __pyx_pf_17OpenGL_accelerate_
 
   /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/buffers_formathandler.pyx":55
  *     isOutput = True
- * 
+ *
  *     def __init__( self, ERROR_ON_COPY=None, a_to_gl=None ):             # <<<<<<<<<<<<<<
  *         if ERROR_ON_COPY is None:
  *             from OpenGL import _configflags
@@ -1215,7 +1215,7 @@ static int __pyx_pf_17OpenGL_accelerate_
 
 /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/buffers_formathandler.pyx":68
  *         self.array_to_gl_constant = a_to_gl
- * 
+ *
  *     cdef object c_as_memoryview( self, object instance ):             # <<<<<<<<<<<<<<
  *         """Ensure instance is a memory view instance or make it one"""
  *         if not PyMemoryView_Check( instance ):
@@ -1271,7 +1271,7 @@ static PyObject *__pyx_f_17OpenGL_accele
 
   /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/buffers_formathandler.pyx":68
  *         self.array_to_gl_constant = a_to_gl
- * 
+ *
  *     cdef object c_as_memoryview( self, object instance ):             # <<<<<<<<<<<<<<
  *         """Ensure instance is a memory view instance or make it one"""
  *         if not PyMemoryView_Check( instance ):
@@ -1587,7 +1587,7 @@ static PyObject *__pyx_f_17OpenGL_accele
  *     cdef c_arrayByteCount( self, object instance ):
  *         """Given a data-value, calculate number of bytes required to represent"""
  *         return PyMemoryView_GET_BUFFER( self.c_as_memoryview( instance ) ).len             # <<<<<<<<<<<<<<
- * 
+ *
  *     cdef c_arrayToGLType( self, object instance ):
  */
   __Pyx_XDECREF(__pyx_r);
@@ -1622,7 +1622,7 @@ static PyObject *__pyx_f_17OpenGL_accele
 
 /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/buffers_formathandler.pyx":98
  *         return PyMemoryView_GET_BUFFER( self.c_as_memoryview( instance ) ).len
- * 
+ *
  *     cdef c_arrayToGLType( self, object instance ):             # <<<<<<<<<<<<<<
  *         """Given a value, guess OpenGL type of the corresponding pointer"""
  *         cdef Py_buffer * buffer
@@ -1750,7 +1750,7 @@ static PyObject *__pyx_f_17OpenGL_accele
  *                 )
  *             )
  *         return constant             # <<<<<<<<<<<<<<
- * 
+ *
  *     cdef c_asArray( self, object instance, object typeCode ):
  */
   __Pyx_XDECREF(__pyx_r);
@@ -1760,7 +1760,7 @@ static PyObject *__pyx_f_17OpenGL_accele
 
   /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/buffers_formathandler.pyx":98
  *         return PyMemoryView_GET_BUFFER( self.c_as_memoryview( instance ) ).len
- * 
+ *
  *     cdef c_arrayToGLType( self, object instance ):             # <<<<<<<<<<<<<<
  *         """Given a value, guess OpenGL type of the corresponding pointer"""
  *         cdef Py_buffer * buffer
@@ -1783,7 +1783,7 @@ static PyObject *__pyx_f_17OpenGL_accele
 
 /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/buffers_formathandler.pyx":111
  *         return constant
- * 
+ *
  *     cdef c_asArray( self, object instance, object typeCode ):             # <<<<<<<<<<<<<<
  *         """Retrieve the given value as a (contiguous) array of type typeCode"""
  *         return self.c_as_memoryview( instance )
@@ -1814,7 +1814,7 @@ static PyObject *__pyx_f_17OpenGL_accele
 
   /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/buffers_formathandler.pyx":111
  *         return constant
- * 
+ *
  *     cdef c_asArray( self, object instance, object typeCode ):             # <<<<<<<<<<<<<<
  *         """Retrieve the given value as a (contiguous) array of type typeCode"""
  *         return self.c_as_memoryview( instance )
@@ -2048,7 +2048,7 @@ static PyObject *__pyx_f_17OpenGL_accele
 }
 
 /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/buffers_formathandler.pyx":51
- * 
+ *
  * cdef class MemoryviewHandler(FormatHandler):
  *     cdef public dict array_to_gl_constant             # <<<<<<<<<<<<<<
  *     cdef public dict gl_constant_to_array
@@ -2160,7 +2160,7 @@ static int __pyx_pf_17OpenGL_accelerate_
  *     cdef public dict array_to_gl_constant
  *     cdef public dict gl_constant_to_array             # <<<<<<<<<<<<<<
  *     isOutput = True
- * 
+ *
  */
 
 /* Python wrapper */
@@ -2678,7 +2678,7 @@ PyMODINIT_FUNC PyInit_buffers_formathand
  * import traceback, weakref
  * from OpenGL.error import CopyError             # <<<<<<<<<<<<<<
  * from OpenGL._bytes import bytes,unicode
- * 
+ *
  */
   __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_GOTREF(__pyx_t_2);
@@ -2698,7 +2698,7 @@ PyMODINIT_FUNC PyInit_buffers_formathand
  * import traceback, weakref
  * from OpenGL.error import CopyError
  * from OpenGL._bytes import bytes,unicode             # <<<<<<<<<<<<<<
- * 
+ *
  * # Following is from the old python_buffer.pxd
  */
   __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
@@ -2726,7 +2726,7 @@ PyMODINIT_FUNC PyInit_buffers_formathand
  *     cdef public dict array_to_gl_constant
  *     cdef public dict gl_constant_to_array
  *     isOutput = True             # <<<<<<<<<<<<<<
- * 
+ *
  *     def __init__( self, ERROR_ON_COPY=None, a_to_gl=None ):
  */
   if (PyDict_SetItem((PyObject *)__pyx_ptype_17OpenGL_accelerate_21buffers_formathandler_MemoryviewHandler->tp_dict, __pyx_n_s_isOutput, Py_True) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
@@ -2945,9 +2945,9 @@ static PyObject* __Pyx_ImportFrom(PyObje
 static CYTHON_INLINE void __Pyx_ExceptionSave(PyObject **type, PyObject **value, PyObject **tb) {
 #if CYTHON_COMPILING_IN_CPYTHON
     PyThreadState *tstate = PyThreadState_GET();
-    *type = tstate->exc_type;
-    *value = tstate->exc_value;
-    *tb = tstate->exc_traceback;
+    *type = tstate->curexc_type;
+    *value = tstate->curexc_value;
+    *tb = tstate->curexc_traceback;
     Py_XINCREF(*type);
     Py_XINCREF(*value);
     Py_XINCREF(*tb);
@@ -2959,12 +2959,12 @@ static void __Pyx_ExceptionReset(PyObjec
 #if CYTHON_COMPILING_IN_CPYTHON
     PyObject *tmp_type, *tmp_value, *tmp_tb;
     PyThreadState *tstate = PyThreadState_GET();
-    tmp_type = tstate->exc_type;
-    tmp_value = tstate->exc_value;
-    tmp_tb = tstate->exc_traceback;
-    tstate->exc_type = type;
-    tstate->exc_value = value;
-    tstate->exc_traceback = tb;
+    tmp_type = tstate->curexc_type;
+    tmp_value = tstate->curexc_value;
+    tmp_tb = tstate->curexc_traceback;
+    tstate->curexc_type = type;
+    tstate->curexc_value = value;
+    tstate->curexc_traceback = tb;
     Py_XDECREF(tmp_type);
     Py_XDECREF(tmp_value);
     Py_XDECREF(tmp_tb);
@@ -3007,12 +3007,12 @@ static int __Pyx_GetException(PyObject *
     *value = local_value;
     *tb = local_tb;
 #if CYTHON_COMPILING_IN_CPYTHON
-    tmp_type = tstate->exc_type;
-    tmp_value = tstate->exc_value;
-    tmp_tb = tstate->exc_traceback;
-    tstate->exc_type = local_type;
-    tstate->exc_value = local_value;
-    tstate->exc_traceback = local_tb;
+    tmp_type = tstate->curexc_type;
+    tmp_value = tstate->curexc_value;
+    tmp_tb = tstate->curexc_traceback;
+    tstate->curexc_type = local_type;
+    tstate->curexc_value = local_value;
+    tstate->curexc_traceback = local_tb;
     Py_XDECREF(tmp_type);
     Py_XDECREF(tmp_value);
     Py_XDECREF(tmp_tb);
Index: Downloads/PyOpenGL-accelerate-3.1.0/src/numpy_formathandler.c
===================================================================
--- Downloads.orig/PyOpenGL-accelerate-3.1.0/src/numpy_formathandler.c
+++ Downloads/PyOpenGL-accelerate-3.1.0/src/numpy_formathandler.c
@@ -558,7 +558,7 @@ static const char *__pyx_f[] = {
 
 /* "/home/mcfletch/.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":723
  * # in Cython to enable them only on the right systems.
- * 
+ *
  * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
  * ctypedef npy_int16      int16_t
  * ctypedef npy_int32      int32_t
@@ -566,7 +566,7 @@ static const char *__pyx_f[] = {
 typedef npy_int8 __pyx_t_5numpy_int8_t;
 
 /* "/home/mcfletch/.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":724
- * 
+ *
  * ctypedef npy_int8       int8_t
  * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
  * ctypedef npy_int32      int32_t
@@ -594,7 +594,7 @@ typedef npy_int64 __pyx_t_5numpy_int64_t
 
 /* "/home/mcfletch/.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":730
  * #ctypedef npy_int128     int128_t
- * 
+ *
  * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
  * ctypedef npy_uint16     uint16_t
  * ctypedef npy_uint32     uint32_t
@@ -602,7 +602,7 @@ typedef npy_int64 __pyx_t_5numpy_int64_t
 typedef npy_uint8 __pyx_t_5numpy_uint8_t;
 
 /* "/home/mcfletch/.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":731
- * 
+ *
  * ctypedef npy_uint8      uint8_t
  * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
  * ctypedef npy_uint32     uint32_t
@@ -630,7 +630,7 @@ typedef npy_uint64 __pyx_t_5numpy_uint64
 
 /* "/home/mcfletch/.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":737
  * #ctypedef npy_uint128    uint128_t
- * 
+ *
  * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
  * ctypedef npy_float64    float64_t
  * #ctypedef npy_float80    float80_t
@@ -638,7 +638,7 @@ typedef npy_uint64 __pyx_t_5numpy_uint64
 typedef npy_float32 __pyx_t_5numpy_float32_t;
 
 /* "/home/mcfletch/.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":738
- * 
+ *
  * ctypedef npy_float32    float32_t
  * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
  * #ctypedef npy_float80    float80_t
@@ -660,7 +660,7 @@ typedef npy_long __pyx_t_5numpy_int_t;
  * ctypedef npy_long       int_t
  * ctypedef npy_longlong   long_t             # <<<<<<<<<<<<<<
  * ctypedef npy_longlong   longlong_t
- * 
+ *
  */
 typedef npy_longlong __pyx_t_5numpy_long_t;
 
@@ -668,14 +668,14 @@ typedef npy_longlong __pyx_t_5numpy_long
  * ctypedef npy_long       int_t
  * ctypedef npy_longlong   long_t
  * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
- * 
+ *
  * ctypedef npy_ulong      uint_t
  */
 typedef npy_longlong __pyx_t_5numpy_longlong_t;
 
 /* "/home/mcfletch/.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":751
  * ctypedef npy_longlong   longlong_t
- * 
+ *
  * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
  * ctypedef npy_ulonglong  ulong_t
  * ctypedef npy_ulonglong  ulonglong_t
@@ -683,11 +683,11 @@ typedef npy_longlong __pyx_t_5numpy_long
 typedef npy_ulong __pyx_t_5numpy_uint_t;
 
 /* "/home/mcfletch/.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":752
- * 
+ *
  * ctypedef npy_ulong      uint_t
  * ctypedef npy_ulonglong  ulong_t             # <<<<<<<<<<<<<<
  * ctypedef npy_ulonglong  ulonglong_t
- * 
+ *
  */
 typedef npy_ulonglong __pyx_t_5numpy_ulong_t;
 
@@ -695,32 +695,32 @@ typedef npy_ulonglong __pyx_t_5numpy_ulo
  * ctypedef npy_ulong      uint_t
  * ctypedef npy_ulonglong  ulong_t
  * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
- * 
+ *
  * ctypedef npy_intp       intp_t
  */
 typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;
 
 /* "/home/mcfletch/.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":755
  * ctypedef npy_ulonglong  ulonglong_t
- * 
+ *
  * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
  * ctypedef npy_uintp      uintp_t
- * 
+ *
  */
 typedef npy_intp __pyx_t_5numpy_intp_t;
 
 /* "/home/mcfletch/.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":756
- * 
+ *
  * ctypedef npy_intp       intp_t
  * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
- * 
+ *
  * ctypedef npy_double     float_t
  */
 typedef npy_uintp __pyx_t_5numpy_uintp_t;
 
 /* "/home/mcfletch/.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":758
  * ctypedef npy_uintp      uintp_t
- * 
+ *
  * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
  * ctypedef npy_double     double_t
  * ctypedef npy_longdouble longdouble_t
@@ -728,11 +728,11 @@ typedef npy_uintp __pyx_t_5numpy_uintp_t
 typedef npy_double __pyx_t_5numpy_float_t;
 
 /* "/home/mcfletch/.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":759
- * 
+ *
  * ctypedef npy_double     float_t
  * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
  * ctypedef npy_longdouble longdouble_t
- * 
+ *
  */
 typedef npy_double __pyx_t_5numpy_double_t;
 
@@ -740,7 +740,7 @@ typedef npy_double __pyx_t_5numpy_double
  * ctypedef npy_double     float_t
  * ctypedef npy_double     double_t
  * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
- * 
+ *
  * ctypedef npy_cfloat      cfloat_t
  */
 typedef npy_longdouble __pyx_t_5numpy_longdouble_t;
@@ -771,7 +771,7 @@ struct __pyx_obj_17OpenGL_accelerate_19n
 
 /* "/home/mcfletch/.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":762
  * ctypedef npy_longdouble longdouble_t
- * 
+ *
  * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
  * ctypedef npy_cdouble     cdouble_t
  * ctypedef npy_clongdouble clongdouble_t
@@ -779,11 +779,11 @@ struct __pyx_obj_17OpenGL_accelerate_19n
 typedef npy_cfloat __pyx_t_5numpy_cfloat_t;
 
 /* "/home/mcfletch/.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":763
- * 
+ *
  * ctypedef npy_cfloat      cfloat_t
  * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
  * ctypedef npy_clongdouble clongdouble_t
- * 
+ *
  */
 typedef npy_cdouble __pyx_t_5numpy_cdouble_t;
 
@@ -791,23 +791,23 @@ typedef npy_cdouble __pyx_t_5numpy_cdoub
  * ctypedef npy_cfloat      cfloat_t
  * ctypedef npy_cdouble     cdouble_t
  * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
- * 
+ *
  * ctypedef npy_cdouble     complex_t
  */
 typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;
 
 /* "/home/mcfletch/.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":766
  * ctypedef npy_clongdouble clongdouble_t
- * 
+ *
  * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
- * 
+ *
  * cdef inline object PyArray_MultiIterNew1(a):
  */
 typedef npy_cdouble __pyx_t_5numpy_complex_t;
 
 /* "OpenGL_accelerate/formathandler.pxd":3
  * """Cython import description for formathandler types"""
- * 
+ *
  * cdef class FormatHandler:             # <<<<<<<<<<<<<<
  * 	cdef public int ERROR_ON_COPY
  * 	cdef object c_from_param( self, object instance, object typeCode)
@@ -821,7 +821,7 @@ struct __pyx_obj_17OpenGL_accelerate_13f
 
 /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/numpy_formathandler.pyx":23
  * 	cdef void import_array()
- * 
+ *
  * cdef class NumpyHandler(FormatHandler):             # <<<<<<<<<<<<<<
  * 	cdef public dict array_to_gl_constant
  * 	cdef public dict gl_constant_to_array
@@ -836,7 +836,7 @@ struct __pyx_obj_17OpenGL_accelerate_19n
 
 /* "OpenGL_accelerate/formathandler.pxd":3
  * """Cython import description for formathandler types"""
- * 
+ *
  * cdef class FormatHandler:             # <<<<<<<<<<<<<<
  * 	cdef public int ERROR_ON_COPY
  * 	cdef object c_from_param( self, object instance, object typeCode)
@@ -858,7 +858,7 @@ static struct __pyx_vtabstruct_17OpenGL_
 
 /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/numpy_formathandler.pyx":23
  * 	cdef void import_array()
- * 
+ *
  * cdef class NumpyHandler(FormatHandler):             # <<<<<<<<<<<<<<
  * 	cdef public dict array_to_gl_constant
  * 	cdef public dict gl_constant_to_array
@@ -1373,7 +1373,7 @@ static PyObject *__pyx_tuple__6;
 
 /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/numpy_formathandler.pyx":29
  * 	HANDLED_TYPES = (np.ndarray,)
- * 
+ *
  * 	def __init__( self, ERROR_ON_COPY=None, a_to_gl=None, gl_to_a=None ):             # <<<<<<<<<<<<<<
  * 		if ERROR_ON_COPY is None:
  * 			from OpenGL import _configflags
@@ -1476,7 +1476,7 @@ static int __pyx_pf_17OpenGL_accelerate_
   __Pyx_INCREF(__pyx_v_gl_to_a);
 
   /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/numpy_formathandler.pyx":30
- * 
+ *
  * 	def __init__( self, ERROR_ON_COPY=None, a_to_gl=None, gl_to_a=None ):
  * 		if ERROR_ON_COPY is None:             # <<<<<<<<<<<<<<
  * 			from OpenGL import _configflags
@@ -1630,7 +1630,7 @@ static int __pyx_pf_17OpenGL_accelerate_
  * 		self.ERROR_ON_COPY = ERROR_ON_COPY
  * 		self.array_to_gl_constant = a_to_gl             # <<<<<<<<<<<<<<
  * 		self.gl_constant_to_array = gl_to_a
- * 
+ *
  */
   if (!(likely(PyDict_CheckExact(__pyx_v_a_to_gl))||((__pyx_v_a_to_gl) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_v_a_to_gl)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __pyx_t_4 = __pyx_v_a_to_gl;
@@ -1645,7 +1645,7 @@ static int __pyx_pf_17OpenGL_accelerate_
  * 		self.ERROR_ON_COPY = ERROR_ON_COPY
  * 		self.array_to_gl_constant = a_to_gl
  * 		self.gl_constant_to_array = gl_to_a             # <<<<<<<<<<<<<<
- * 
+ *
  * 	cdef np.ndarray c_check_array( self, object instance ):
  */
   if (!(likely(PyDict_CheckExact(__pyx_v_gl_to_a))||((__pyx_v_gl_to_a) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_v_gl_to_a)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
@@ -1659,7 +1659,7 @@ static int __pyx_pf_17OpenGL_accelerate_
 
   /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/numpy_formathandler.pyx":29
  * 	HANDLED_TYPES = (np.ndarray,)
- * 
+ *
  * 	def __init__( self, ERROR_ON_COPY=None, a_to_gl=None, gl_to_a=None ):             # <<<<<<<<<<<<<<
  * 		if ERROR_ON_COPY is None:
  * 			from OpenGL import _configflags
@@ -1686,7 +1686,7 @@ static int __pyx_pf_17OpenGL_accelerate_
 
 /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/numpy_formathandler.pyx":43
  * 		self.gl_constant_to_array = gl_to_a
- * 
+ *
  * 	cdef np.ndarray c_check_array( self, object instance ):             # <<<<<<<<<<<<<<
  * 		if not PyArray_Check( instance ):
  * 			raise TypeError(
@@ -1704,7 +1704,7 @@ static PyArrayObject *__pyx_f_17OpenGL_a
   __Pyx_RefNannySetupContext("c_check_array", 0);
 
   /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/numpy_formathandler.pyx":44
- * 
+ *
  * 	cdef np.ndarray c_check_array( self, object instance ):
  * 		if not PyArray_Check( instance ):             # <<<<<<<<<<<<<<
  * 			raise TypeError(
@@ -1756,7 +1756,7 @@ static PyArrayObject *__pyx_f_17OpenGL_a
  * 				"""Numpy format handler passed a non-numpy-array object %s (of type %s)"""%( instance, type(instance) ),
  * 			)
  * 		return <np.ndarray> instance             # <<<<<<<<<<<<<<
- * 
+ *
  * 	cdef c_from_param( self, object instance, object typeCode ):
  */
   __Pyx_XDECREF(((PyObject *)__pyx_r));
@@ -1766,7 +1766,7 @@ static PyArrayObject *__pyx_f_17OpenGL_a
 
   /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/numpy_formathandler.pyx":43
  * 		self.gl_constant_to_array = gl_to_a
- * 
+ *
  * 	cdef np.ndarray c_check_array( self, object instance ):             # <<<<<<<<<<<<<<
  * 		if not PyArray_Check( instance ):
  * 			raise TypeError(
@@ -1786,7 +1786,7 @@ static PyArrayObject *__pyx_f_17OpenGL_a
 
 /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/numpy_formathandler.pyx":50
  * 		return <np.ndarray> instance
- * 
+ *
  * 	cdef c_from_param( self, object instance, object typeCode ):             # <<<<<<<<<<<<<<
  * 		"""simple function-based from_param"""
  * 		cdef np.ndarray working = self.c_check_array( instance )
@@ -1988,7 +1988,7 @@ static PyObject *__pyx_f_17OpenGL_accele
  * 				)
  * 			)
  * 		return c_void_p(<size_t> (working.data))             # <<<<<<<<<<<<<<
- * 
+ *
  * 	cdef c_dataPointer( self, object instance ):
  */
   __Pyx_XDECREF(__pyx_r);
@@ -2011,7 +2011,7 @@ static PyObject *__pyx_f_17OpenGL_accele
 
   /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/numpy_formathandler.pyx":50
  * 		return <np.ndarray> instance
- * 
+ *
  * 	cdef c_from_param( self, object instance, object typeCode ):             # <<<<<<<<<<<<<<
  * 		"""simple function-based from_param"""
  * 		cdef np.ndarray working = self.c_check_array( instance )
@@ -2035,7 +2035,7 @@ static PyObject *__pyx_f_17OpenGL_accele
 
 /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/numpy_formathandler.pyx":69
  * 		return c_void_p(<size_t> (working.data))
- * 
+ *
  * 	cdef c_dataPointer( self, object instance ):             # <<<<<<<<<<<<<<
  * 		"""Retrieve data-pointer directly"""
  * 		return <size_t> (<np.ndarray>self.c_check_array( instance )).data
@@ -2070,7 +2070,7 @@ static PyObject *__pyx_f_17OpenGL_accele
 
   /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/numpy_formathandler.pyx":69
  * 		return c_void_p(<size_t> (working.data))
- * 
+ *
  * 	cdef c_dataPointer( self, object instance ):             # <<<<<<<<<<<<<<
  * 		"""Retrieve data-pointer directly"""
  * 		return <size_t> (<np.ndarray>self.c_check_array( instance )).data
@@ -2798,7 +2798,7 @@ static PyObject *__pyx_f_17OpenGL_accele
  * 	cdef c_dimensions( self, object instance ):
  * 		"""Retrieve full set of dimensions for the array as tuple"""
  * 		return instance.shape             # <<<<<<<<<<<<<<
- * 
+ *
  * 	cdef np.dtype typeCodeToDtype( self, object typeCode ):
  */
   __Pyx_XDECREF(__pyx_r);
@@ -2829,7 +2829,7 @@ static PyObject *__pyx_f_17OpenGL_accele
 
 /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/numpy_formathandler.pyx":120
  * 		return instance.shape
- * 
+ *
  * 	cdef np.dtype typeCodeToDtype( self, object typeCode ):             # <<<<<<<<<<<<<<
  * 		"""Convert type-code specification to a numpy dtype instance"""
  * 		if isinstance( typeCode, np.dtype ):
@@ -2855,7 +2855,7 @@ static PyArray_Descr *__pyx_f_17OpenGL_a
  * 			return typeCode
  * 		elif isinstance( typeCode, (bytes,unicode) ):
  */
-  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_typeCode, ((PyObject*)__pyx_ptype_5numpy_dtype)); 
+  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_typeCode, ((PyObject*)__pyx_ptype_5numpy_dtype));
   __pyx_t_2 = (__pyx_t_1 != 0);
   if (__pyx_t_2) {
 
@@ -2941,7 +2941,7 @@ static PyArray_Descr *__pyx_f_17OpenGL_a
 
   /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/numpy_formathandler.pyx":120
  * 		return instance.shape
- * 
+ *
  * 	cdef np.dtype typeCodeToDtype( self, object typeCode ):             # <<<<<<<<<<<<<<
  * 		"""Convert type-code specification to a numpy dtype instance"""
  * 		if isinstance( typeCode, np.dtype ):
@@ -3184,7 +3184,7 @@ static PyArrayObject *__pyx_f_17OpenGL_a
  * 				)
  * 			else:
  * 				return instance             # <<<<<<<<<<<<<<
- * 
+ *
  * # Cython numpy tutorial neglects to mention this AFAICS
  */
       __Pyx_XDECREF(((PyObject *)__pyx_r));
@@ -3217,7 +3217,7 @@ static PyArrayObject *__pyx_f_17OpenGL_a
 }
 
 /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/numpy_formathandler.pyx":24
- * 
+ *
  * cdef class NumpyHandler(FormatHandler):
  * 	cdef public dict array_to_gl_constant             # <<<<<<<<<<<<<<
  * 	cdef public dict gl_constant_to_array
@@ -3486,9 +3486,9 @@ static int __pyx_pf_5numpy_7ndarray___ge
 
   /* "/home/mcfletch/.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":200
  *             # of flags
- * 
+ *
  *             if info == NULL: return             # <<<<<<<<<<<<<<
- * 
+ *
  *             cdef int copy_shape, i, ndim
  */
   __pyx_t_1 = ((__pyx_v_info == NULL) != 0);
@@ -3498,11 +3498,11 @@ static int __pyx_pf_5numpy_7ndarray___ge
   }
 
   /* "/home/mcfletch/.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":203
- * 
+ *
  *             cdef int copy_shape, i, ndim
  *             cdef int endian_detector = 1             # <<<<<<<<<<<<<<
  *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
- * 
+ *
  */
   __pyx_v_endian_detector = 1;
 
@@ -3510,23 +3510,23 @@ static int __pyx_pf_5numpy_7ndarray___ge
  *             cdef int copy_shape, i, ndim
  *             cdef int endian_detector = 1
  *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
- * 
+ *
  *             ndim = PyArray_NDIM(self)
  */
   __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);
 
   /* "/home/mcfletch/.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":206
  *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
- * 
+ *
  *             ndim = PyArray_NDIM(self)             # <<<<<<<<<<<<<<
- * 
+ *
  *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
  */
   __pyx_v_ndim = PyArray_NDIM(__pyx_v_self);
 
   /* "/home/mcfletch/.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":208
  *             ndim = PyArray_NDIM(self)
- * 
+ *
  *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
  *                 copy_shape = 1
  *             else:
@@ -3535,7 +3535,7 @@ static int __pyx_pf_5numpy_7ndarray___ge
   if (__pyx_t_1) {
 
     /* "/home/mcfletch/.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":209
- * 
+ *
  *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
  *                 copy_shape = 1             # <<<<<<<<<<<<<<
  *             else:
@@ -3550,7 +3550,7 @@ static int __pyx_pf_5numpy_7ndarray___ge
  *                 copy_shape = 1
  *             else:
  *                 copy_shape = 0             # <<<<<<<<<<<<<<
- * 
+ *
  *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
  */
     __pyx_v_copy_shape = 0;
@@ -3559,7 +3559,7 @@ static int __pyx_pf_5numpy_7ndarray___ge
 
   /* "/home/mcfletch/.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":213
  *                 copy_shape = 0
- * 
+ *
  *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
  *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
  *                 raise ValueError(u"ndarray is not C contiguous")
@@ -3568,11 +3568,11 @@ static int __pyx_pf_5numpy_7ndarray___ge
   if (__pyx_t_1) {
 
     /* "/home/mcfletch/.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":214
- * 
+ *
  *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
  *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):             # <<<<<<<<<<<<<<
  *                 raise ValueError(u"ndarray is not C contiguous")
- * 
+ *
  */
     __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_C_CONTIGUOUS) != 0)) != 0);
     __pyx_t_3 = __pyx_t_2;
@@ -3585,7 +3585,7 @@ static int __pyx_pf_5numpy_7ndarray___ge
  *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
  *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
  *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
- * 
+ *
  *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
  */
     __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
@@ -3597,7 +3597,7 @@ static int __pyx_pf_5numpy_7ndarray___ge
 
   /* "/home/mcfletch/.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":217
  *                 raise ValueError(u"ndarray is not C contiguous")
- * 
+ *
  *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
  *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
  *                 raise ValueError(u"ndarray is not Fortran contiguous")
@@ -3606,11 +3606,11 @@ static int __pyx_pf_5numpy_7ndarray___ge
   if (__pyx_t_3) {
 
     /* "/home/mcfletch/.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":218
- * 
+ *
  *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
  *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):             # <<<<<<<<<<<<<<
  *                 raise ValueError(u"ndarray is not Fortran contiguous")
- * 
+ *
  */
     __pyx_t_1 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_F_CONTIGUOUS) != 0)) != 0);
     __pyx_t_2 = __pyx_t_1;
@@ -3623,7 +3623,7 @@ static int __pyx_pf_5numpy_7ndarray___ge
  *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
  *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
  *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
- * 
+ *
  *             info.buf = PyArray_DATA(self)
  */
     __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
@@ -3635,7 +3635,7 @@ static int __pyx_pf_5numpy_7ndarray___ge
 
   /* "/home/mcfletch/.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":221
  *                 raise ValueError(u"ndarray is not Fortran contiguous")
- * 
+ *
  *             info.buf = PyArray_DATA(self)             # <<<<<<<<<<<<<<
  *             info.ndim = ndim
  *             if copy_shape:
@@ -3643,7 +3643,7 @@ static int __pyx_pf_5numpy_7ndarray___ge
   __pyx_v_info->buf = PyArray_DATA(__pyx_v_self);
 
   /* "/home/mcfletch/.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":222
- * 
+ *
  *             info.buf = PyArray_DATA(self)
  *             info.ndim = ndim             # <<<<<<<<<<<<<<
  *             if copy_shape:
@@ -3746,7 +3746,7 @@ static int __pyx_pf_5numpy_7ndarray___ge
  *             info.suboffsets = NULL
  *             info.itemsize = PyArray_ITEMSIZE(self)             # <<<<<<<<<<<<<<
  *             info.readonly = not PyArray_ISWRITEABLE(self)
- * 
+ *
  */
   __pyx_v_info->itemsize = PyArray_ITEMSIZE(__pyx_v_self);
 
@@ -3754,13 +3754,13 @@ static int __pyx_pf_5numpy_7ndarray___ge
  *             info.suboffsets = NULL
  *             info.itemsize = PyArray_ITEMSIZE(self)
  *             info.readonly = not PyArray_ISWRITEABLE(self)             # <<<<<<<<<<<<<<
- * 
+ *
  *             cdef int t
  */
   __pyx_v_info->readonly = (!(PyArray_ISWRITEABLE(__pyx_v_self) != 0));
 
   /* "/home/mcfletch/.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":239
- * 
+ *
  *             cdef int t
  *             cdef char* f = NULL             # <<<<<<<<<<<<<<
  *             cdef dtype descr = self.descr
@@ -3782,16 +3782,16 @@ static int __pyx_pf_5numpy_7ndarray___ge
 
   /* "/home/mcfletch/.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":244
  *             cdef int offset
- * 
+ *
  *             cdef bint hasfields = PyDataType_HASFIELDS(descr)             # <<<<<<<<<<<<<<
- * 
+ *
  *             if not hasfields and not copy_shape:
  */
   __pyx_v_hasfields = PyDataType_HASFIELDS(__pyx_v_descr);
 
   /* "/home/mcfletch/.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":246
  *             cdef bint hasfields = PyDataType_HASFIELDS(descr)
- * 
+ *
  *             if not hasfields and not copy_shape:             # <<<<<<<<<<<<<<
  *                 # do not call releasebuffer
  *                 info.obj = None
@@ -3825,7 +3825,7 @@ static int __pyx_pf_5numpy_7ndarray___ge
  *             else:
  *                 # need to call releasebuffer
  *                 info.obj = self             # <<<<<<<<<<<<<<
- * 
+ *
  *             if not hasfields:
  */
     __Pyx_INCREF(((PyObject *)__pyx_v_self));
@@ -3838,7 +3838,7 @@ static int __pyx_pf_5numpy_7ndarray___ge
 
   /* "/home/mcfletch/.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":253
  *                 info.obj = self
- * 
+ *
  *             if not hasfields:             # <<<<<<<<<<<<<<
  *                 t = descr.type_num
  *                 if ((descr.byteorder == c'>' and little_endian) or
@@ -3847,7 +3847,7 @@ static int __pyx_pf_5numpy_7ndarray___ge
   if (__pyx_t_1) {
 
     /* "/home/mcfletch/.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":254
- * 
+ *
  *             if not hasfields:
  *                 t = descr.type_num             # <<<<<<<<<<<<<<
  *                 if ((descr.byteorder == c'>' and little_endian) or
@@ -4190,7 +4190,7 @@ static int __pyx_pf_5numpy_7ndarray___ge
  *                                       info.format + _buffer_format_string_len,
  *                                       &offset)
  *                 f[0] = c'\0' # Terminate format string             # <<<<<<<<<<<<<<
- * 
+ *
  *         def __releasebuffer__(ndarray self, Py_buffer* info):
  */
     (__pyx_v_f[0]) = '\x00';
@@ -4230,7 +4230,7 @@ static int __pyx_pf_5numpy_7ndarray___ge
 
 /* "/home/mcfletch/.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":288
  *                 f[0] = c'\0' # Terminate format string
- * 
+ *
  *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
  *             if PyArray_HASFIELDS(self):
  *                 stdlib.free(info.format)
@@ -4253,7 +4253,7 @@ static void __pyx_pf_5numpy_7ndarray_2__
   __Pyx_RefNannySetupContext("__releasebuffer__", 0);
 
   /* "/home/mcfletch/.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":289
- * 
+ *
  *         def __releasebuffer__(ndarray self, Py_buffer* info):
  *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
  *                 stdlib.free(info.format)
@@ -4289,7 +4289,7 @@ static void __pyx_pf_5numpy_7ndarray_2__
  *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
  *                 stdlib.free(info.strides)             # <<<<<<<<<<<<<<
  *                 # info.shape was stored after info.strides in the same block
- * 
+ *
  */
     free(__pyx_v_info->strides);
     goto __pyx_L4;
@@ -4298,7 +4298,7 @@ static void __pyx_pf_5numpy_7ndarray_2__
 
   /* "/home/mcfletch/.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":288
  *                 f[0] = c'\0' # Terminate format string
- * 
+ *
  *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
  *             if PyArray_HASFIELDS(self):
  *                 stdlib.free(info.format)
@@ -4310,10 +4310,10 @@ static void __pyx_pf_5numpy_7ndarray_2__
 
 /* "/home/mcfletch/.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":768
  * ctypedef npy_cdouble     complex_t
- * 
+ *
  * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
  *     return PyArray_MultiIterNew(1, <void*>a)
- * 
+ *
  */
 
 static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
@@ -4326,10 +4326,10 @@ static CYTHON_INLINE PyObject *__pyx_f_5
   __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);
 
   /* "/home/mcfletch/.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":769
- * 
+ *
  * cdef inline object PyArray_MultiIterNew1(a):
  *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
- * 
+ *
  * cdef inline object PyArray_MultiIterNew2(a, b):
  */
   __Pyx_XDECREF(__pyx_r);
@@ -4341,10 +4341,10 @@ static CYTHON_INLINE PyObject *__pyx_f_5
 
   /* "/home/mcfletch/.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":768
  * ctypedef npy_cdouble     complex_t
- * 
+ *
  * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
  *     return PyArray_MultiIterNew(1, <void*>a)
- * 
+ *
  */
 
   /* function exit code */
@@ -4360,10 +4360,10 @@ static CYTHON_INLINE PyObject *__pyx_f_5
 
 /* "/home/mcfletch/.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":771
  *     return PyArray_MultiIterNew(1, <void*>a)
- * 
+ *
  * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
  *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
- * 
+ *
  */
 
 static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
@@ -4376,10 +4376,10 @@ static CYTHON_INLINE PyObject *__pyx_f_5
   __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);
 
   /* "/home/mcfletch/.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":772
- * 
+ *
  * cdef inline object PyArray_MultiIterNew2(a, b):
  *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
- * 
+ *
  * cdef inline object PyArray_MultiIterNew3(a, b, c):
  */
   __Pyx_XDECREF(__pyx_r);
@@ -4391,10 +4391,10 @@ static CYTHON_INLINE PyObject *__pyx_f_5
 
   /* "/home/mcfletch/.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":771
  *     return PyArray_MultiIterNew(1, <void*>a)
- * 
+ *
  * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
  *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
- * 
+ *
  */
 
   /* function exit code */
@@ -4410,10 +4410,10 @@ static CYTHON_INLINE PyObject *__pyx_f_5
 
 /* "/home/mcfletch/.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":774
  *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
- * 
+ *
  * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
  *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
- * 
+ *
  */
 
 static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
@@ -4426,10 +4426,10 @@ static CYTHON_INLINE PyObject *__pyx_f_5
   __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);
 
   /* "/home/mcfletch/.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":775
- * 
+ *
  * cdef inline object PyArray_MultiIterNew3(a, b, c):
  *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
- * 
+ *
  * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
  */
   __Pyx_XDECREF(__pyx_r);
@@ -4441,10 +4441,10 @@ static CYTHON_INLINE PyObject *__pyx_f_5
 
   /* "/home/mcfletch/.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":774
  *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
- * 
+ *
  * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
  *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
- * 
+ *
  */
 
   /* function exit code */
@@ -4460,10 +4460,10 @@ static CYTHON_INLINE PyObject *__pyx_f_5
 
 /* "/home/mcfletch/.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":777
  *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
- * 
+ *
  * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
  *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
- * 
+ *
  */
 
 static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
@@ -4476,10 +4476,10 @@ static CYTHON_INLINE PyObject *__pyx_f_5
   __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);
 
   /* "/home/mcfletch/.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":778
- * 
+ *
  * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
  *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
- * 
+ *
  * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
  */
   __Pyx_XDECREF(__pyx_r);
@@ -4491,10 +4491,10 @@ static CYTHON_INLINE PyObject *__pyx_f_5
 
   /* "/home/mcfletch/.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":777
  *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
- * 
+ *
  * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
  *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
- * 
+ *
  */
 
   /* function exit code */
@@ -4510,10 +4510,10 @@ static CYTHON_INLINE PyObject *__pyx_f_5
 
 /* "/home/mcfletch/.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":780
  *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
- * 
+ *
  * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
  *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
- * 
+ *
  */
 
 static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
@@ -4526,10 +4526,10 @@ static CYTHON_INLINE PyObject *__pyx_f_5
   __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);
 
   /* "/home/mcfletch/.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":781
- * 
+ *
  * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
  *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
- * 
+ *
  * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:
  */
   __Pyx_XDECREF(__pyx_r);
@@ -4541,10 +4541,10 @@ static CYTHON_INLINE PyObject *__pyx_f_5
 
   /* "/home/mcfletch/.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":780
  *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
- * 
+ *
  * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
  *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
- * 
+ *
  */
 
   /* function exit code */
@@ -4560,7 +4560,7 @@ static CYTHON_INLINE PyObject *__pyx_f_5
 
 /* "/home/mcfletch/.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":783
  *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
- * 
+ *
  * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
  *     # Recursive utility function used in __getbuffer__ to get format
  *     # string. The new location in the format string is returned.
@@ -4606,13 +4606,13 @@ static CYTHON_INLINE char *__pyx_f_5nump
  *     cdef int endian_detector = 1
  *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
  *     cdef tuple fields
- * 
+ *
  */
   __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);
 
   /* "/home/mcfletch/.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":794
  *     cdef tuple fields
- * 
+ *
  *     for childname in descr.names:             # <<<<<<<<<<<<<<
  *         fields = descr.fields[childname]
  *         child, new_offset = fields
@@ -4633,11 +4633,11 @@ static CYTHON_INLINE char *__pyx_f_5nump
     __pyx_t_3 = 0;
 
     /* "/home/mcfletch/.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":795
- * 
+ *
  *     for childname in descr.names:
  *         fields = descr.fields[childname]             # <<<<<<<<<<<<<<
  *         child, new_offset = fields
- * 
+ *
  */
     __pyx_t_3 = PyObject_GetItem(__pyx_v_descr->fields, __pyx_v_childname); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 795; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
     __Pyx_GOTREF(__pyx_t_3);
@@ -4649,7 +4649,7 @@ static CYTHON_INLINE char *__pyx_f_5nump
  *     for childname in descr.names:
  *         fields = descr.fields[childname]
  *         child, new_offset = fields             # <<<<<<<<<<<<<<
- * 
+ *
  *         if (end - f) - <int>(new_offset - offset[0]) < 15:
  */
     if (likely(__pyx_v_fields != Py_None)) {
@@ -4665,8 +4665,8 @@ static CYTHON_INLINE char *__pyx_f_5nump
         {__pyx_filename = __pyx_f[1]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
       }
       #if CYTHON_COMPILING_IN_CPYTHON
-      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
-      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
+      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0);
+      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1);
       __Pyx_INCREF(__pyx_t_3);
       __Pyx_INCREF(__pyx_t_4);
       #else
@@ -4686,10 +4686,10 @@ static CYTHON_INLINE char *__pyx_f_5nump
 
     /* "/home/mcfletch/.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":798
  *         child, new_offset = fields
- * 
+ *
  *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
  *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
- * 
+ *
  */
     __pyx_t_4 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
     __Pyx_GOTREF(__pyx_t_4);
@@ -4702,10 +4702,10 @@ static CYTHON_INLINE char *__pyx_f_5nump
     if (__pyx_t_6) {
 
       /* "/home/mcfletch/.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":799
- * 
+ *
  *         if (end - f) - <int>(new_offset - offset[0]) < 15:
  *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
- * 
+ *
  *         if ((child.byteorder == c'>' and little_endian) or
  */
       __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
@@ -4717,7 +4717,7 @@ static CYTHON_INLINE char *__pyx_f_5nump
 
     /* "/home/mcfletch/.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":801
  *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
- * 
+ *
  *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
  *             (child.byteorder == c'<' and not little_endian)):
  *             raise ValueError(u"Non-native byte order not supported")
@@ -4731,7 +4731,7 @@ static CYTHON_INLINE char *__pyx_f_5nump
     if (!__pyx_t_7) {
 
       /* "/home/mcfletch/.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":802
- * 
+ *
  *         if ((child.byteorder == c'>' and little_endian) or
  *             (child.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
  *             raise ValueError(u"Non-native byte order not supported")
@@ -4765,7 +4765,7 @@ static CYTHON_INLINE char *__pyx_f_5nump
     }
 
     /* "/home/mcfletch/.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":813
- * 
+ *
  *         # Output padding bytes
  *         while offset[0] < new_offset:             # <<<<<<<<<<<<<<
  *             f[0] = 120 # "x"; pad byte
@@ -4794,7 +4794,7 @@ static CYTHON_INLINE char *__pyx_f_5nump
  *             f[0] = 120 # "x"; pad byte
  *             f += 1             # <<<<<<<<<<<<<<
  *             offset[0] += 1
- * 
+ *
  */
       __pyx_v_f = (__pyx_v_f + 1);
 
@@ -4802,7 +4802,7 @@ static CYTHON_INLINE char *__pyx_f_5nump
  *             f[0] = 120 # "x"; pad byte
  *             f += 1
  *             offset[0] += 1             # <<<<<<<<<<<<<<
- * 
+ *
  *         offset[0] += child.itemsize
  */
       __pyx_t_10 = 0;
@@ -4811,9 +4811,9 @@ static CYTHON_INLINE char *__pyx_f_5nump
 
     /* "/home/mcfletch/.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":818
  *             offset[0] += 1
- * 
+ *
  *         offset[0] += child.itemsize             # <<<<<<<<<<<<<<
- * 
+ *
  *         if not PyDataType_HASFIELDS(child):
  */
     __pyx_t_10 = 0;
@@ -4821,7 +4821,7 @@ static CYTHON_INLINE char *__pyx_f_5nump
 
     /* "/home/mcfletch/.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":820
  *         offset[0] += child.itemsize
- * 
+ *
  *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
  *             t = child.type_num
  *             if end - f < 5:
@@ -4830,7 +4830,7 @@ static CYTHON_INLINE char *__pyx_f_5nump
     if (__pyx_t_6) {
 
       /* "/home/mcfletch/.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":821
- * 
+ *
  *         if not PyDataType_HASFIELDS(child):
  *             t = child.type_num             # <<<<<<<<<<<<<<
  *             if end - f < 5:
@@ -4846,7 +4846,7 @@ static CYTHON_INLINE char *__pyx_f_5nump
  *             t = child.type_num
  *             if end - f < 5:             # <<<<<<<<<<<<<<
  *                 raise RuntimeError(u"Format string allocated too short.")
- * 
+ *
  */
       __pyx_t_6 = (((__pyx_v_end - __pyx_v_f) < 5) != 0);
       if (__pyx_t_6) {
@@ -4855,7 +4855,7 @@ static CYTHON_INLINE char *__pyx_f_5nump
  *             t = child.type_num
  *             if end - f < 5:
  *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
- * 
+ *
  *             # Until ticket #99 is fixed, use integers to avoid warnings
  */
         __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 823; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
@@ -4866,7 +4866,7 @@ static CYTHON_INLINE char *__pyx_f_5nump
       }
 
       /* "/home/mcfletch/.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":826
- * 
+ *
  *             # Until ticket #99 is fixed, use integers to avoid warnings
  *             if   t == NPY_BYTE:        f[0] =  98 #"b"             # <<<<<<<<<<<<<<
  *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
@@ -5218,7 +5218,7 @@ static CYTHON_INLINE char *__pyx_f_5nump
  *             # so don't output it
  *             f = _util_dtypestring(child, f, end, offset)             # <<<<<<<<<<<<<<
  *     return f
- * 
+ *
  */
       __pyx_t_11 = __pyx_f_5numpy__util_dtypestring(__pyx_v_child, __pyx_v_f, __pyx_v_end, __pyx_v_offset); if (unlikely(__pyx_t_11 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 849; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
       __pyx_v_f = __pyx_t_11;
@@ -5231,15 +5231,15 @@ static CYTHON_INLINE char *__pyx_f_5nump
  *             # so don't output it
  *             f = _util_dtypestring(child, f, end, offset)
  *     return f             # <<<<<<<<<<<<<<
- * 
- * 
+ *
+ *
  */
   __pyx_r = __pyx_v_f;
   goto __pyx_L0;
 
   /* "/home/mcfletch/.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":783
  *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
- * 
+ *
  * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
  *     # Recursive utility function used in __getbuffer__ to get format
  *     # string. The new location in the format string is returned.
@@ -5263,8 +5263,8 @@ static CYTHON_INLINE char *__pyx_f_5nump
 }
 
 /* "/home/mcfletch/.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":966
- * 
- * 
+ *
+ *
  * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
  *      cdef PyObject* baseptr
  *      if base is None:
@@ -5325,7 +5325,7 @@ static CYTHON_INLINE void __pyx_f_5numpy
  *          baseptr = <PyObject*>base
  *      Py_XDECREF(arr.base)             # <<<<<<<<<<<<<<
  *      arr.base = baseptr
- * 
+ *
  */
   Py_XDECREF(__pyx_v_arr->base);
 
@@ -5333,14 +5333,14 @@ static CYTHON_INLINE void __pyx_f_5numpy
  *          baseptr = <PyObject*>base
  *      Py_XDECREF(arr.base)
  *      arr.base = baseptr             # <<<<<<<<<<<<<<
- * 
+ *
  * cdef inline object get_array_base(ndarray arr):
  */
   __pyx_v_arr->base = __pyx_v_baseptr;
 
   /* "/home/mcfletch/.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":966
- * 
- * 
+ *
+ *
  * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
  *      cdef PyObject* baseptr
  *      if base is None:
@@ -5352,7 +5352,7 @@ static CYTHON_INLINE void __pyx_f_5numpy
 
 /* "/home/mcfletch/.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":976
  *      arr.base = baseptr
- * 
+ *
  * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
  *     if arr.base is NULL:
  *         return None
@@ -5365,7 +5365,7 @@ static CYTHON_INLINE PyObject *__pyx_f_5
   __Pyx_RefNannySetupContext("get_array_base", 0);
 
   /* "/home/mcfletch/.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":977
- * 
+ *
  * cdef inline object get_array_base(ndarray arr):
  *     if arr.base is NULL:             # <<<<<<<<<<<<<<
  *         return None
@@ -5401,7 +5401,7 @@ static CYTHON_INLINE PyObject *__pyx_f_5
 
   /* "/home/mcfletch/.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":976
  *      arr.base = baseptr
- * 
+ *
  * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
  *     if arr.base is NULL:
  *         return None
@@ -5655,7 +5655,7 @@ static int __Pyx_InitCachedConstants(voi
  *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
  *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
  *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
- * 
+ *
  *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
  */
   __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_C_contiguous); if (unlikely(!__pyx_tuple_)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
@@ -5666,7 +5666,7 @@ static int __Pyx_InitCachedConstants(voi
  *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
  *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
  *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
- * 
+ *
  *             info.buf = PyArray_DATA(self)
  */
   __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_Fortran_contiguou); if (unlikely(!__pyx_tuple__2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
@@ -5685,10 +5685,10 @@ static int __Pyx_InitCachedConstants(voi
   __Pyx_GIVEREF(__pyx_tuple__3);
 
   /* "/home/mcfletch/.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":799
- * 
+ *
  *         if (end - f) - <int>(new_offset - offset[0]) < 15:
  *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
- * 
+ *
  *         if ((child.byteorder == c'>' and little_endian) or
  */
   __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor); if (unlikely(!__pyx_tuple__4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
@@ -5710,7 +5710,7 @@ static int __Pyx_InitCachedConstants(voi
  *             t = child.type_num
  *             if end - f < 5:
  *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
- * 
+ *
  *             # Until ticket #99 is fixed, use integers to avoid warnings
  */
   __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor_2); if (unlikely(!__pyx_tuple__6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 823; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
@@ -5835,7 +5835,7 @@ PyMODINIT_FUNC PyInit_numpy_formathandle
   if (__Pyx_SetAttrString(__pyx_m, "NumpyHandler", (PyObject *)&__pyx_type_17OpenGL_accelerate_19numpy_formathandler_NumpyHandler) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __pyx_ptype_17OpenGL_accelerate_19numpy_formathandler_NumpyHandler = &__pyx_type_17OpenGL_accelerate_19numpy_formathandler_NumpyHandler;
   /*--- Type import code ---*/
-  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "type", 
+  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "type",
   #if CYTHON_COMPILING_IN_PYPY
   sizeof(PyTypeObject),
   #else
@@ -5904,7 +5904,7 @@ PyMODINIT_FUNC PyInit_numpy_formathandle
  * import traceback, weakref
  * from OpenGL.error import CopyError             # <<<<<<<<<<<<<<
  * from OpenGL._bytes import bytes,unicode
- * 
+ *
  */
   __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_GOTREF(__pyx_t_2);
@@ -5924,7 +5924,7 @@ PyMODINIT_FUNC PyInit_numpy_formathandle
  * import traceback, weakref
  * from OpenGL.error import CopyError
  * from OpenGL._bytes import bytes,unicode             # <<<<<<<<<<<<<<
- * 
+ *
  * cdef extern from "Python.h":
  */
   __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
@@ -5953,7 +5953,7 @@ PyMODINIT_FUNC PyInit_numpy_formathandle
  * 	cdef public dict gl_constant_to_array
  * 	isOutput = True             # <<<<<<<<<<<<<<
  * 	HANDLED_TYPES = (np.ndarray,)
- * 
+ *
  */
   if (PyDict_SetItem((PyObject *)__pyx_ptype_17OpenGL_accelerate_19numpy_formathandler_NumpyHandler->tp_dict, __pyx_n_s_isOutput, Py_True) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   PyType_Modified(__pyx_ptype_17OpenGL_accelerate_19numpy_formathandler_NumpyHandler);
@@ -5962,7 +5962,7 @@ PyMODINIT_FUNC PyInit_numpy_formathandle
  * 	cdef public dict gl_constant_to_array
  * 	isOutput = True
  * 	HANDLED_TYPES = (np.ndarray,)             # <<<<<<<<<<<<<<
- * 
+ *
  * 	def __init__( self, ERROR_ON_COPY=None, a_to_gl=None, gl_to_a=None ):
  */
   __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
@@ -5993,7 +5993,7 @@ PyMODINIT_FUNC PyInit_numpy_formathandle
 
   /* "/home/mcfletch/.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":976
  *      arr.base = baseptr
- * 
+ *
  * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
  *     if arr.base is NULL:
  *         return None
@@ -6450,9 +6450,9 @@ static CYTHON_INLINE int __Pyx_TypeTest(
 static CYTHON_INLINE void __Pyx_ExceptionSave(PyObject **type, PyObject **value, PyObject **tb) {
 #if CYTHON_COMPILING_IN_CPYTHON
     PyThreadState *tstate = PyThreadState_GET();
-    *type = tstate->exc_type;
-    *value = tstate->exc_value;
-    *tb = tstate->exc_traceback;
+    *type = tstate->curexc_type;
+    *value = tstate->curexc_value;
+    *tb = tstate->curexc_traceback;
     Py_XINCREF(*type);
     Py_XINCREF(*value);
     Py_XINCREF(*tb);
@@ -6464,12 +6464,12 @@ static void __Pyx_ExceptionReset(PyObjec
 #if CYTHON_COMPILING_IN_CPYTHON
     PyObject *tmp_type, *tmp_value, *tmp_tb;
     PyThreadState *tstate = PyThreadState_GET();
-    tmp_type = tstate->exc_type;
-    tmp_value = tstate->exc_value;
-    tmp_tb = tstate->exc_traceback;
-    tstate->exc_type = type;
-    tstate->exc_value = value;
-    tstate->exc_traceback = tb;
+    tmp_type = tstate->curexc_type;
+    tmp_value = tstate->curexc_value;
+    tmp_tb = tstate->curexc_traceback;
+    tstate->curexc_type = type;
+    tstate->curexc_value = value;
+    tstate->curexc_traceback = tb;
     Py_XDECREF(tmp_type);
     Py_XDECREF(tmp_value);
     Py_XDECREF(tmp_tb);
@@ -6512,12 +6512,12 @@ static int __Pyx_GetException(PyObject *
     *value = local_value;
     *tb = local_tb;
 #if CYTHON_COMPILING_IN_CPYTHON
-    tmp_type = tstate->exc_type;
-    tmp_value = tstate->exc_value;
-    tmp_tb = tstate->exc_traceback;
-    tstate->exc_type = local_type;
-    tstate->exc_value = local_value;
-    tstate->exc_traceback = local_tb;
+    tmp_type = tstate->curexc_type;
+    tmp_value = tstate->curexc_value;
+    tmp_tb = tstate->curexc_traceback;
+    tstate->curexc_type = local_type;
+    tstate->curexc_value = local_value;
+    tstate->curexc_traceback = local_tb;
     Py_XDECREF(tmp_type);
     Py_XDECREF(tmp_value);
     Py_XDECREF(tmp_tb);
Index: Downloads/PyOpenGL-accelerate-3.1.0/src/vbo.c
===================================================================
--- Downloads.orig/PyOpenGL-accelerate-3.1.0/src/vbo.c
+++ Downloads/PyOpenGL-accelerate-3.1.0/src/vbo.c
@@ -537,7 +537,7 @@ struct __pyx_obj_17OpenGL_accelerate_3vb
 
 /* "OpenGL_accelerate/formathandler.pxd":3
  * """Cython import description for formathandler types"""
- * 
+ *
  * cdef class FormatHandler:             # <<<<<<<<<<<<<<
  * 	cdef public int ERROR_ON_COPY
  * 	cdef object c_from_param( self, object instance, object typeCode)
@@ -551,10 +551,10 @@ struct __pyx_obj_17OpenGL_accelerate_13f
 
 /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/vbo.pyx":13
  * _NULL = object()
- * 
+ *
  * cdef class VBO:             # <<<<<<<<<<<<<<
  *     """Instances can be passed into array-handling routines
- * 
+ *
  */
 struct __pyx_obj_17OpenGL_accelerate_3vbo_VBO {
   PyObject_HEAD
@@ -577,11 +577,11 @@ struct __pyx_obj_17OpenGL_accelerate_3vb
 
 
 /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/vbo.pyx":257
- * 
- * 
+ *
+ *
  * cdef class VBOOffset:             # <<<<<<<<<<<<<<
  *     """Offset into a VBO instance
- * 
+ *
  */
 struct __pyx_obj_17OpenGL_accelerate_3vbo_VBOOffset {
   PyObject_HEAD
@@ -593,7 +593,7 @@ struct __pyx_obj_17OpenGL_accelerate_3vb
 
 /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/vbo.pyx":290
  *             raise RuntimeError( """Attempting to use offset into deleted VBO""" )
- * 
+ *
  * cdef class VBOHandler(FormatHandler):             # <<<<<<<<<<<<<<
  *     """Handles VBO instances passed in as array data"""
  *     cdef object vp0
@@ -607,7 +607,7 @@ struct __pyx_obj_17OpenGL_accelerate_3vb
 
 /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/vbo.pyx":332
  *         return self.arrayType.dimensions( (<VBO>instance).data )
- * 
+ *
  * cdef class VBOOffsetHandler(FormatHandler):             # <<<<<<<<<<<<<<
  *     cdef object arrayType # import and use explicit reference...
  *     isOutput = False
@@ -621,7 +621,7 @@ struct __pyx_obj_17OpenGL_accelerate_3vb
 
 /* "OpenGL_accelerate/formathandler.pxd":3
  * """Cython import description for formathandler types"""
- * 
+ *
  * cdef class FormatHandler:             # <<<<<<<<<<<<<<
  * 	cdef public int ERROR_ON_COPY
  * 	cdef object c_from_param( self, object instance, object typeCode)
@@ -643,10 +643,10 @@ static struct __pyx_vtabstruct_17OpenGL_
 
 /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/vbo.pyx":13
  * _NULL = object()
- * 
+ *
  * cdef class VBO:             # <<<<<<<<<<<<<<
  *     """Instances can be passed into array-handling routines
- * 
+ *
  */
 
 struct __pyx_vtabstruct_17OpenGL_accelerate_3vbo_VBO {
@@ -659,11 +659,11 @@ static struct __pyx_vtabstruct_17OpenGL_
 
 
 /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/vbo.pyx":257
- * 
- * 
+ *
+ *
  * cdef class VBOOffset:             # <<<<<<<<<<<<<<
  *     """Offset into a VBO instance
- * 
+ *
  */
 
 struct __pyx_vtabstruct_17OpenGL_accelerate_3vbo_VBOOffset {
@@ -674,7 +674,7 @@ static struct __pyx_vtabstruct_17OpenGL_
 
 /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/vbo.pyx":290
  *             raise RuntimeError( """Attempting to use offset into deleted VBO""" )
- * 
+ *
  * cdef class VBOHandler(FormatHandler):             # <<<<<<<<<<<<<<
  *     """Handles VBO instances passed in as array data"""
  *     cdef object vp0
@@ -688,7 +688,7 @@ static struct __pyx_vtabstruct_17OpenGL_
 
 /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/vbo.pyx":332
  *         return self.arrayType.dimensions( (<VBO>instance).data )
- * 
+ *
  * cdef class VBOOffsetHandler(FormatHandler):             # <<<<<<<<<<<<<<
  *     cdef object arrayType # import and use explicit reference...
  *     isOutput = False
@@ -2116,7 +2116,7 @@ static PyObject *__pyx_f_17OpenGL_accele
  *         self.copied = False
  *     def __setitem__( self, slice, array):             # <<<<<<<<<<<<<<
  *         """Set slice of data on the array and vbo (if copied already)
- * 
+ *
  */
 
 /* Python wrapper */
@@ -2466,7 +2466,7 @@ static int __pyx_pf_17OpenGL_accelerate_
     if (__pyx_t_4) {
 
       /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/vbo.pyx":164
- * 
+ *
  *                 # find the step size from the dimensions and base size...
  *                 size = self.arrayType.arrayByteCount( self.data[0] )             # <<<<<<<<<<<<<<
  *                 #baseSize = self.arrayType.unitSize( data )
@@ -2566,7 +2566,7 @@ static int __pyx_pf_17OpenGL_accelerate_
  *         self.copied = False
  *     def __setitem__( self, slice, array):             # <<<<<<<<<<<<<<
  *         """Set slice of data on the array and vbo (if copied already)
- * 
+ *
  */
 
   /* function exit code */
@@ -3352,13 +3352,13 @@ static PyObject *__pyx_pf_17OpenGL_accel
           }
           #if CYTHON_COMPILING_IN_CPYTHON
           if (likely(PyTuple_CheckExact(sequence))) {
-            __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
-            __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
-            __pyx_t_5 = PyTuple_GET_ITEM(sequence, 2); 
+            __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0);
+            __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1);
+            __pyx_t_5 = PyTuple_GET_ITEM(sequence, 2);
           } else {
-            __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
-            __pyx_t_4 = PyList_GET_ITEM(sequence, 1); 
-            __pyx_t_5 = PyList_GET_ITEM(sequence, 2); 
+            __pyx_t_3 = PyList_GET_ITEM(sequence, 0);
+            __pyx_t_4 = PyList_GET_ITEM(sequence, 1);
+            __pyx_t_5 = PyList_GET_ITEM(sequence, 2);
           }
           __Pyx_INCREF(__pyx_t_3);
           __Pyx_INCREF(__pyx_t_4);
@@ -4126,9 +4126,9 @@ static PyObject *__pyx_pf_17OpenGL_accel
  */
   #ifndef CYTHON_WITHOUT_ASSERTIONS
   if (unlikely(!Py_OptimizeFlag)) {
-    __pyx_t_2 = PyInt_Check(__pyx_v_other); 
+    __pyx_t_2 = PyInt_Check(__pyx_v_other);
     if (!__pyx_t_2) {
-      __pyx_t_1 = PyLong_Check(__pyx_v_other); 
+      __pyx_t_1 = PyLong_Check(__pyx_v_other);
       __pyx_t_4 = __pyx_t_1;
     } else {
       __pyx_t_4 = __pyx_t_2;
@@ -4208,7 +4208,7 @@ static int __pyx_f_17OpenGL_accelerate_3
  *     cdef int check_live( self ):
  *         if self.data is _NULL:             # <<<<<<<<<<<<<<
  *             raise RuntimeError( """Attempting to use a deleted VBO""" )
- * 
+ *
  */
   __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 247; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_GOTREF(__pyx_t_1);
@@ -4221,7 +4221,7 @@ static int __pyx_f_17OpenGL_accelerate_3
  *     cdef int check_live( self ):
  *         if self.data is _NULL:
  *             raise RuntimeError( """Attempting to use a deleted VBO""" )             # <<<<<<<<<<<<<<
- * 
+ *
  *     __enter__ = bind
  */
     __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
@@ -4252,7 +4252,7 @@ static int __pyx_f_17OpenGL_accelerate_3
 }
 
 /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/vbo.pyx":251
- * 
+ *
  *     __enter__ = bind
  *     def __exit__( self, exc_type=None, exc_val=None, exc_tb=None ):             # <<<<<<<<<<<<<<
  *         """Context manager exit"""
@@ -4352,7 +4352,7 @@ static PyObject *__pyx_pf_17OpenGL_accel
  *         """Context manager exit"""
  *         self.unbind()             # <<<<<<<<<<<<<<
  *         return False # do not supress exceptions...
- * 
+ *
  */
   __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_unbind); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_GOTREF(__pyx_t_1);
@@ -4365,8 +4365,8 @@ static PyObject *__pyx_pf_17OpenGL_accel
  *         """Context manager exit"""
  *         self.unbind()
  *         return False # do not supress exceptions...             # <<<<<<<<<<<<<<
- * 
- * 
+ *
+ *
  */
   __Pyx_XDECREF(__pyx_r);
   __Pyx_INCREF(Py_False);
@@ -4374,7 +4374,7 @@ static PyObject *__pyx_pf_17OpenGL_accel
   goto __pyx_L0;
 
   /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/vbo.pyx":251
- * 
+ *
  *     __enter__ = bind
  *     def __exit__( self, exc_type=None, exc_val=None, exc_tb=None ):             # <<<<<<<<<<<<<<
  *         """Context manager exit"""
@@ -5742,7 +5742,7 @@ static void __pyx_pf_17OpenGL_accelerate
  *         if self.vbo is not None:
  *             Py_XDECREF( self.vbo )             # <<<<<<<<<<<<<<
  *             self.vbo = None
- * 
+ *
  */
     __pyx_t_3 = ((PyObject *)__pyx_v_self->vbo);
     __Pyx_INCREF(__pyx_t_3);
@@ -5753,7 +5753,7 @@ static void __pyx_pf_17OpenGL_accelerate
  *         if self.vbo is not None:
  *             Py_XDECREF( self.vbo )
  *             self.vbo = None             # <<<<<<<<<<<<<<
- * 
+ *
  *     def __getattr__( self, key ):
  */
     __Pyx_INCREF(Py_None);
@@ -5779,7 +5779,7 @@ static void __pyx_pf_17OpenGL_accelerate
 
 /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/vbo.pyx":276
  *             self.vbo = None
- * 
+ *
  *     def __getattr__( self, key ):             # <<<<<<<<<<<<<<
  *         if key != 'vbo':
  *             return getattr( self.vbo, key )
@@ -5810,7 +5810,7 @@ static PyObject *__pyx_pf_17OpenGL_accel
   __Pyx_RefNannySetupContext("__getattr__", 0);
 
   /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/vbo.pyx":277
- * 
+ *
  *     def __getattr__( self, key ):
  *         if key != 'vbo':             # <<<<<<<<<<<<<<
  *             return getattr( self.vbo, key )
@@ -5866,7 +5866,7 @@ static PyObject *__pyx_pf_17OpenGL_accel
 
   /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/vbo.pyx":276
  *             self.vbo = None
- * 
+ *
  *     def __getattr__( self, key ):             # <<<<<<<<<<<<<<
  *         if key != 'vbo':
  *             return getattr( self.vbo, key )
@@ -6043,7 +6043,7 @@ static int __pyx_f_17OpenGL_accelerate_3
  *             return self.vbo.check_live()
  *         else:
  *             raise RuntimeError( """Attempting to use offset into deleted VBO""" )             # <<<<<<<<<<<<<<
- * 
+ *
  * cdef class VBOHandler(FormatHandler):
  */
     __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 288; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
@@ -6833,7 +6833,7 @@ static PyObject *__pyx_f_17OpenGL_accele
  *         """Retrieve full set of dimensions for the array as tuple"""
  *         (<VBO>instance).check_live()             # <<<<<<<<<<<<<<
  *         return self.arrayType.dimensions( (<VBO>instance).data )
- * 
+ *
  */
   ((struct __pyx_vtabstruct_17OpenGL_accelerate_3vbo_VBO *)((struct __pyx_obj_17OpenGL_accelerate_3vbo_VBO *)__pyx_v_instance)->__pyx_vtab)->check_live(((struct __pyx_obj_17OpenGL_accelerate_3vbo_VBO *)__pyx_v_instance));
 
@@ -6841,7 +6841,7 @@ static PyObject *__pyx_f_17OpenGL_accele
  *         """Retrieve full set of dimensions for the array as tuple"""
  *         (<VBO>instance).check_live()
  *         return self.arrayType.dimensions( (<VBO>instance).data )             # <<<<<<<<<<<<<<
- * 
+ *
  * cdef class VBOOffsetHandler(FormatHandler):
  */
   __Pyx_XDECREF(__pyx_r);
@@ -6921,7 +6921,7 @@ static int __pyx_pf_17OpenGL_accelerate_
  *     def __init__( self ):
  *         from OpenGL.arrays.arraydatatype import ArrayDatatype             # <<<<<<<<<<<<<<
  *         self.arrayType = ArrayDatatype
- * 
+ *
  */
   __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 336; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_GOTREF(__pyx_t_1);
@@ -6942,7 +6942,7 @@ static int __pyx_pf_17OpenGL_accelerate_
  *     def __init__( self ):
  *         from OpenGL.arrays.arraydatatype import ArrayDatatype
  *         self.arrayType = ArrayDatatype             # <<<<<<<<<<<<<<
- * 
+ *
  *     cdef object c_dataPointer( self, object instance ):
  */
   __Pyx_INCREF(__pyx_v_ArrayDatatype);
@@ -6975,7 +6975,7 @@ static int __pyx_pf_17OpenGL_accelerate_
 
 /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/vbo.pyx":339
  *         self.arrayType = ArrayDatatype
- * 
+ *
  *     cdef object c_dataPointer( self, object instance ):             # <<<<<<<<<<<<<<
  *         """Retrieve data-pointer directly"""
  *         (<VBOOffset>instance).check_live()
@@ -7015,7 +7015,7 @@ static PyObject *__pyx_f_17OpenGL_accele
 
   /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/vbo.pyx":339
  *         self.arrayType = ArrayDatatype
- * 
+ *
  *     cdef object c_dataPointer( self, object instance ):             # <<<<<<<<<<<<<<
  *         """Retrieve data-pointer directly"""
  *         (<VBOOffset>instance).check_live()
@@ -7127,7 +7127,7 @@ static PyObject *__pyx_f_17OpenGL_accele
  *         """Retrieve the given value as a (contiguous) array of type typeCode"""
  *         (<VBOOffset>instance).check_live()             # <<<<<<<<<<<<<<
  *         return instance
- * 
+ *
  */
   ((struct __pyx_vtabstruct_17OpenGL_accelerate_3vbo_VBOOffset *)((struct __pyx_obj_17OpenGL_accelerate_3vbo_VBOOffset *)__pyx_v_instance)->__pyx_vtab)->check_live(((struct __pyx_obj_17OpenGL_accelerate_3vbo_VBOOffset *)__pyx_v_instance));
 
@@ -7135,7 +7135,7 @@ static PyObject *__pyx_f_17OpenGL_accele
  *         """Retrieve the given value as a (contiguous) array of type typeCode"""
  *         (<VBOOffset>instance).check_live()
  *         return instance             # <<<<<<<<<<<<<<
- * 
+ *
  *     cdef c_arrayByteCount( self, object instance ):
  */
   __Pyx_XDECREF(__pyx_r);
@@ -7160,7 +7160,7 @@ static PyObject *__pyx_f_17OpenGL_accele
 
 /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/vbo.pyx":352
  *         return instance
- * 
+ *
  *     cdef c_arrayByteCount( self, object instance ):             # <<<<<<<<<<<<<<
  *         """Given a data-value, calculate number of bytes required to represent"""
  *         (<VBOOffset>instance).check_live()
@@ -7211,7 +7211,7 @@ static PyObject *__pyx_f_17OpenGL_accele
 
   /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/vbo.pyx":352
  *         return instance
- * 
+ *
  *     cdef c_arrayByteCount( self, object instance ):             # <<<<<<<<<<<<<<
  *         """Given a data-value, calculate number of bytes required to represent"""
  *         (<VBOOffset>instance).check_live()
@@ -8583,7 +8583,7 @@ static int __Pyx_InitCachedConstants(voi
  *     cdef int check_live( self ):
  *         if self.data is _NULL:
  *             raise RuntimeError( """Attempting to use a deleted VBO""" )             # <<<<<<<<<<<<<<
- * 
+ *
  *     __enter__ = bind
  */
   __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s_Attempting_to_use_a_deleted_VBO); if (unlikely(!__pyx_tuple__3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
@@ -8594,7 +8594,7 @@ static int __Pyx_InitCachedConstants(voi
  *             return self.vbo.check_live()
  *         else:
  *             raise RuntimeError( """Attempting to use offset into deleted VBO""" )             # <<<<<<<<<<<<<<
- * 
+ *
  * cdef class VBOHandler(FormatHandler):
  */
   __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_s_Attempting_to_use_offset_into_de); if (unlikely(!__pyx_tuple__4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 288; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
@@ -8825,7 +8825,7 @@ PyMODINIT_FUNC PyInit_vbo(void)
  * from OpenGL_accelerate.formathandler cimport FormatHandler
  * from OpenGL import error             # <<<<<<<<<<<<<<
  * from OpenGL._bytes import bytes,unicode
- * 
+ *
  */
   __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 4; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_GOTREF(__pyx_t_1);
@@ -8845,7 +8845,7 @@ PyMODINIT_FUNC PyInit_vbo(void)
  * from OpenGL_accelerate.formathandler cimport FormatHandler
  * from OpenGL import error
  * from OpenGL._bytes import bytes,unicode             # <<<<<<<<<<<<<<
- * 
+ *
  * cdef extern from "Python.h":
  */
   __pyx_t_2 = PyList_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
@@ -8871,9 +8871,9 @@ PyMODINIT_FUNC PyInit_vbo(void)
 
   /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/vbo.pyx":11
  *     cdef void Py_XDECREF( object )
- * 
+ *
  * _NULL = object()             # <<<<<<<<<<<<<<
- * 
+ *
  * cdef class VBO:
  */
   __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_object, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
@@ -8922,7 +8922,7 @@ PyMODINIT_FUNC PyInit_vbo(void)
 
   /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/vbo.pyx":250
  *             raise RuntimeError( """Attempting to use a deleted VBO""" )
- * 
+ *
  *     __enter__ = bind             # <<<<<<<<<<<<<<
  *     def __exit__( self, exc_type=None, exc_val=None, exc_tb=None ):
  *         """Context manager exit"""
@@ -9641,9 +9641,9 @@ return_ne:
 static CYTHON_INLINE void __Pyx_ExceptionSave(PyObject **type, PyObject **value, PyObject **tb) {
 #if CYTHON_COMPILING_IN_CPYTHON
     PyThreadState *tstate = PyThreadState_GET();
-    *type = tstate->exc_type;
-    *value = tstate->exc_value;
-    *tb = tstate->exc_traceback;
+    *type = tstate->curexc_type;
+    *value = tstate->curexc_value;
+    *tb = tstate->curexc_traceback;
     Py_XINCREF(*type);
     Py_XINCREF(*value);
     Py_XINCREF(*tb);
@@ -9655,12 +9655,12 @@ static void __Pyx_ExceptionReset(PyObjec
 #if CYTHON_COMPILING_IN_CPYTHON
     PyObject *tmp_type, *tmp_value, *tmp_tb;
     PyThreadState *tstate = PyThreadState_GET();
-    tmp_type = tstate->exc_type;
-    tmp_value = tstate->exc_value;
-    tmp_tb = tstate->exc_traceback;
-    tstate->exc_type = type;
-    tstate->exc_value = value;
-    tstate->exc_traceback = tb;
+    tmp_type = tstate->curexc_type;
+    tmp_value = tstate->curexc_value;
+    tmp_tb = tstate->curexc_traceback;
+    tstate->curexc_type = type;
+    tstate->curexc_value = value;
+    tstate->curexc_traceback = tb;
     Py_XDECREF(tmp_type);
     Py_XDECREF(tmp_value);
     Py_XDECREF(tmp_tb);
@@ -9703,12 +9703,12 @@ static int __Pyx_GetException(PyObject *
     *value = local_value;
     *tb = local_tb;
 #if CYTHON_COMPILING_IN_CPYTHON
-    tmp_type = tstate->exc_type;
-    tmp_value = tstate->exc_value;
-    tmp_tb = tstate->exc_traceback;
-    tstate->exc_type = local_type;
-    tstate->exc_value = local_value;
-    tstate->exc_traceback = local_tb;
+    tmp_type = tstate->curexc_type;
+    tmp_value = tstate->curexc_value;
+    tmp_tb = tstate->curexc_traceback;
+    tstate->curexc_type = local_type;
+    tstate->curexc_value = local_value;
+    tstate->curexc_traceback = local_tb;
     Py_XDECREF(tmp_type);
     Py_XDECREF(tmp_value);
     Py_XDECREF(tmp_tb);
Index: Downloads/PyOpenGL-accelerate-3.1.0/src/wrapper.c
===================================================================
--- Downloads.orig/PyOpenGL-accelerate-3.1.0/src/wrapper.c
+++ Downloads/PyOpenGL-accelerate-3.1.0/src/wrapper.c
@@ -597,8 +597,8 @@ struct __pyx_obj_17OpenGL_accelerate_7wr
 
 
 /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/wrapper.pyx":40
- * 
- * 
+ *
+ *
  * cdef class CArgCalculatorElement:             # <<<<<<<<<<<<<<
  * 	cdef object wrapper
  * 	cdef long index
@@ -617,7 +617,7 @@ struct __pyx_obj_17OpenGL_accelerate_7wr
 
 /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/wrapper.pyx":72
  * 		return self.converter
- * 
+ *
  * cdef class CArgCalculator:             # <<<<<<<<<<<<<<
  * 	"""C-coded version of the c-arg calculator pattern"""
  * 	cdef list mapping
@@ -630,8 +630,8 @@ struct __pyx_obj_17OpenGL_accelerate_7wr
 
 
 /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/wrapper.pyx":93
- * 
- * 
+ *
+ *
  * cdef class PyArgCalculatorElement:             # <<<<<<<<<<<<<<
  * 	cdef object wrapper
  * 	cdef long index
@@ -649,7 +649,7 @@ struct __pyx_obj_17OpenGL_accelerate_7wr
 
 /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/wrapper.pyx":130
  * 			raise
- * 
+ *
  * cdef class PyArgCalculator:             # <<<<<<<<<<<<<<
  * 	"""C-coded version of the py-arg calculator pattern"""
  * 	cdef list mapping
@@ -665,7 +665,7 @@ struct __pyx_obj_17OpenGL_accelerate_7wr
 
 /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/wrapper.pyx":165
  * 		]
- * 
+ *
  * cdef class CArgumentCalculator:             # <<<<<<<<<<<<<<
  * 	cdef list cResolvers
  * 	cdef int resolver_length
@@ -680,7 +680,7 @@ struct __pyx_obj_17OpenGL_accelerate_7wr
 
 /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/wrapper.pyx":204
  * 		return result
- * 
+ *
  * cdef class CallFuncPyConverter( pyArgConverter ):             # <<<<<<<<<<<<<<
  * 	"""PyConverter that takes a callable and calls it on incoming"""
  * 	cdef object function
@@ -706,10 +706,10 @@ struct __pyx_obj_17OpenGL_accelerate_7wr
 
 /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/wrapper.pyx":239
  * 		)
- * 
+ *
  * cdef class Wrapper:             # <<<<<<<<<<<<<<
  * 	"""C-coded most-generic form of the wrapper's core function
- * 
+ *
  */
 struct __pyx_obj_17OpenGL_accelerate_7wrapper_Wrapper {
   PyObject_HEAD
@@ -730,11 +730,11 @@ struct __pyx_obj_17OpenGL_accelerate_7wr
 
 
 /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/wrapper.pyx":343
- * 
- * 
+ *
+ *
  * cdef class getPyArgsName(cArgConverter):             # <<<<<<<<<<<<<<
  * 	"""CConverter returning named Python argument
- * 
+ *
  */
 struct __pyx_obj_17OpenGL_accelerate_7wrapper_getPyArgsName {
   struct __pyx_obj_17OpenGL_accelerate_7wrapper_cArgConverter __pyx_base;
@@ -745,7 +745,7 @@ struct __pyx_obj_17OpenGL_accelerate_7wr
 
 /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/wrapper.pyx":363
  * 		)
- * 
+ *
  * cdef class returnPyArgument(returnConverter):             # <<<<<<<<<<<<<<
  * 	"""ReturnValues returning the named pyArgs value"""
  * 	cdef public unsigned int index
@@ -787,7 +787,7 @@ struct __pyx_obj_17OpenGL_accelerate_7wr
 
 /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/wrapper.pyx":10
  * 	cdef object PyDict_GetItem( object, object )
- * 
+ *
  * cdef class cArgConverter:             # <<<<<<<<<<<<<<
  * 	"""C-level API definition for cConverter objects"""
  * 	def __call__( self, tuple pyArgs, int index, object wrapper ):
@@ -842,8 +842,8 @@ static struct __pyx_vtabstruct_17OpenGL_
 
 
 /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/wrapper.pyx":40
- * 
- * 
+ *
+ *
  * cdef class CArgCalculatorElement:             # <<<<<<<<<<<<<<
  * 	cdef object wrapper
  * 	cdef long index
@@ -857,7 +857,7 @@ static struct __pyx_vtabstruct_17OpenGL_
 
 /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/wrapper.pyx":72
  * 		return self.converter
- * 
+ *
  * cdef class CArgCalculator:             # <<<<<<<<<<<<<<
  * 	"""C-coded version of the c-arg calculator pattern"""
  * 	cdef list mapping
@@ -870,8 +870,8 @@ static struct __pyx_vtabstruct_17OpenGL_
 
 
 /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/wrapper.pyx":93
- * 
- * 
+ *
+ *
  * cdef class PyArgCalculatorElement:             # <<<<<<<<<<<<<<
  * 	cdef object wrapper
  * 	cdef long index
@@ -885,7 +885,7 @@ static struct __pyx_vtabstruct_17OpenGL_
 
 /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/wrapper.pyx":130
  * 			raise
- * 
+ *
  * cdef class PyArgCalculator:             # <<<<<<<<<<<<<<
  * 	"""C-coded version of the py-arg calculator pattern"""
  * 	cdef list mapping
@@ -899,7 +899,7 @@ static struct __pyx_vtabstruct_17OpenGL_
 
 /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/wrapper.pyx":165
  * 		]
- * 
+ *
  * cdef class CArgumentCalculator:             # <<<<<<<<<<<<<<
  * 	cdef list cResolvers
  * 	cdef int resolver_length
@@ -913,7 +913,7 @@ static struct __pyx_vtabstruct_17OpenGL_
 
 /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/wrapper.pyx":204
  * 		return result
- * 
+ *
  * cdef class CallFuncPyConverter( pyArgConverter ):             # <<<<<<<<<<<<<<
  * 	"""PyConverter that takes a callable and calls it on incoming"""
  * 	cdef object function
@@ -940,11 +940,11 @@ static struct __pyx_vtabstruct_17OpenGL_
 
 
 /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/wrapper.pyx":343
- * 
- * 
+ *
+ *
  * cdef class getPyArgsName(cArgConverter):             # <<<<<<<<<<<<<<
  * 	"""CConverter returning named Python argument
- * 
+ *
  */
 
 struct __pyx_vtabstruct_17OpenGL_accelerate_7wrapper_getPyArgsName {
@@ -955,7 +955,7 @@ static struct __pyx_vtabstruct_17OpenGL_
 
 /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/wrapper.pyx":363
  * 		)
- * 
+ *
  * cdef class returnPyArgument(returnConverter):             # <<<<<<<<<<<<<<
  * 	"""ReturnValues returning the named pyArgs value"""
  * 	cdef public unsigned int index
@@ -2016,7 +2016,7 @@ static PyObject *__pyx_pf_17OpenGL_accel
  * 		return self.c_call( result, baseOperation, pyArgs, cArgs )
  * 	cdef object c_call( self, object result, object baseOperation, tuple pyArgs, tuple cArgs ):             # <<<<<<<<<<<<<<
  * 		"""Implementation would do something here"""
- * 
+ *
  */
 
 static PyObject *__pyx_f_17OpenGL_accelerate_7wrapper_15returnConverter_c_call(CYTHON_UNUSED struct __pyx_obj_17OpenGL_accelerate_7wrapper_returnConverter *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_result, CYTHON_UNUSED PyObject *__pyx_v_baseOperation, CYTHON_UNUSED PyObject *__pyx_v_pyArgs, CYTHON_UNUSED PyObject *__pyx_v_cArgs) {
@@ -2151,7 +2151,7 @@ static int __pyx_pf_17OpenGL_accelerate_
  * 			self.c_converter = converter
  * 			self.doCAPI = True
  */
-  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_converter, ((PyObject*)__pyx_ptype_17OpenGL_accelerate_7wrapper_cArgConverter)); 
+  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_converter, ((PyObject*)__pyx_ptype_17OpenGL_accelerate_7wrapper_cArgConverter));
   __pyx_t_3 = (__pyx_t_2 != 0);
   if (__pyx_t_3) {
 
@@ -2526,13 +2526,13 @@ static PyObject *__pyx_f_17OpenGL_accele
  * 			err.args += ( self.index, self.wrapper )
  * 			raise             # <<<<<<<<<<<<<<
  * 		return self.converter
- * 
+ *
  */
       __Pyx_GIVEREF(__pyx_t_5);
       __Pyx_GIVEREF(__pyx_t_7);
       __Pyx_XGIVEREF(__pyx_t_6);
       __Pyx_ErrRestore(__pyx_t_5, __pyx_t_7, __pyx_t_6);
-      __pyx_t_5 = 0; __pyx_t_7 = 0; __pyx_t_6 = 0; 
+      __pyx_t_5 = 0; __pyx_t_7 = 0; __pyx_t_6 = 0;
       {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
       __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
       __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
@@ -2564,7 +2564,7 @@ static PyObject *__pyx_f_17OpenGL_accele
  * 			err.args += ( self.index, self.wrapper )
  * 			raise
  * 		return self.converter             # <<<<<<<<<<<<<<
- * 
+ *
  * cdef class CArgCalculator:
  */
   __Pyx_XDECREF(__pyx_r);
@@ -2957,7 +2957,7 @@ static PyObject *__pyx_f_17OpenGL_accele
  * 			(<CArgCalculatorElement> calc).c_call( pyArgs )
  * 			for calc in self.mapping             # <<<<<<<<<<<<<<
  * 		]
- * 
+ *
  */
   if (unlikely(__pyx_v_self->mapping == Py_None)) {
     PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
@@ -3133,7 +3133,7 @@ static int __pyx_pf_17OpenGL_accelerate_
  * 			self.doCAPI = True
  * 			self.c_converter = converter
  */
-  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_converter, ((PyObject*)__pyx_ptype_17OpenGL_accelerate_7wrapper_pyArgConverter)); 
+  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_converter, ((PyObject*)__pyx_ptype_17OpenGL_accelerate_7wrapper_pyArgConverter));
   __pyx_t_3 = (__pyx_t_2 != 0);
   if (__pyx_t_3) {
 
@@ -3567,7 +3567,7 @@ static PyObject *__pyx_f_17OpenGL_accele
  * 			if hasattr( err, 'args' ):
  * 				err.args += ( self.converter, )             # <<<<<<<<<<<<<<
  * 			raise
- * 
+ *
  */
         __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_v_err, __pyx_n_s_args); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
         __Pyx_GOTREF(__pyx_t_11);
@@ -3590,14 +3590,14 @@ static PyObject *__pyx_f_17OpenGL_accele
  * 			if hasattr( err, 'args' ):
  * 				err.args += ( self.converter, )
  * 			raise             # <<<<<<<<<<<<<<
- * 
+ *
  * cdef class PyArgCalculator:
  */
       __Pyx_GIVEREF(__pyx_t_7);
       __Pyx_GIVEREF(__pyx_t_6);
       __Pyx_XGIVEREF(__pyx_t_5);
       __Pyx_ErrRestore(__pyx_t_7, __pyx_t_6, __pyx_t_5);
-      __pyx_t_7 = 0; __pyx_t_6 = 0; __pyx_t_5 = 0; 
+      __pyx_t_7 = 0; __pyx_t_6 = 0; __pyx_t_5 = 0;
       {__pyx_filename = __pyx_f[0]; __pyx_lineno = 128; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
       __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
       __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
@@ -3860,7 +3860,7 @@ static int __pyx_pf_17OpenGL_accelerate_
  * 			for (i,converter) in enumerate( pyConverters )
  * 		]
  * 		self.length = len([ p for p in pyConverters if not getattr(p,'optional',False)])             # <<<<<<<<<<<<<<
- * 
+ *
  * 	def __call__( self, tuple args ):
  */
   __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
@@ -3947,7 +3947,7 @@ static int __pyx_pf_17OpenGL_accelerate_
 
 /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/wrapper.pyx":147
  * 		self.length = len([ p for p in pyConverters if not getattr(p,'optional',False)])
- * 
+ *
  * 	def __call__( self, tuple args ):             # <<<<<<<<<<<<<<
  * 		return self.c_call( args )
  * 	cdef list c_call( self, tuple args ):
@@ -4020,7 +4020,7 @@ static PyObject *__pyx_pf_17OpenGL_accel
   __Pyx_RefNannySetupContext("__call__", 0);
 
   /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/wrapper.pyx":148
- * 
+ *
  * 	def __call__( self, tuple args ):
  * 		return self.c_call( args )             # <<<<<<<<<<<<<<
  * 	cdef list c_call( self, tuple args ):
@@ -4035,7 +4035,7 @@ static PyObject *__pyx_pf_17OpenGL_accel
 
   /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/wrapper.pyx":147
  * 		self.length = len([ p for p in pyConverters if not getattr(p,'optional',False)])
- * 
+ *
  * 	def __call__( self, tuple args ):             # <<<<<<<<<<<<<<
  * 		return self.c_call( args )
  * 	cdef list c_call( self, tuple args ):
@@ -4214,7 +4214,7 @@ static PyObject *__pyx_f_17OpenGL_accele
  * 			(<PyArgCalculatorElement> calc).c_call( args )
  * 			for calc in self.mapping             # <<<<<<<<<<<<<<
  * 		]
- * 
+ *
  */
   if (unlikely(__pyx_v_self->mapping == Py_None)) {
     PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
@@ -4690,7 +4690,7 @@ static PyObject *__pyx_f_17OpenGL_accele
  * 				# TODO: should pre-calculate this, isinstance is a very
  * 				# heavy operation.
  */
-    __pyx_t_8 = __Pyx_TypeCheck(__pyx_v_converter, ((PyObject*)__pyx_ptype_17OpenGL_accelerate_7wrapper_cArgumentConverter)); 
+    __pyx_t_8 = __Pyx_TypeCheck(__pyx_v_converter, ((PyObject*)__pyx_ptype_17OpenGL_accelerate_7wrapper_cArgumentConverter));
     __pyx_t_2 = (__pyx_t_8 != 0);
     if (__pyx_t_2) {
 
@@ -4785,7 +4785,7 @@ static PyObject *__pyx_f_17OpenGL_accele
           __Pyx_GIVEREF(__pyx_t_4);
           __Pyx_XGIVEREF(__pyx_t_3);
           __Pyx_ErrRestore(__pyx_t_5, __pyx_t_4, __pyx_t_3);
-          __pyx_t_5 = 0; __pyx_t_4 = 0; __pyx_t_3 = 0; 
+          __pyx_t_5 = 0; __pyx_t_4 = 0; __pyx_t_3 = 0;
           {__pyx_filename = __pyx_f[0]; __pyx_lineno = 195; __pyx_clineno = __LINE__; goto __pyx_L9_except_error;}
           __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
           __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
@@ -4903,13 +4903,13 @@ static PyObject *__pyx_f_17OpenGL_accele
  * 					err.args += (converter,)
  * 					raise             # <<<<<<<<<<<<<<
  * 		return result
- * 
+ *
  */
           __Pyx_GIVEREF(__pyx_t_3);
           __Pyx_GIVEREF(__pyx_t_4);
           __Pyx_XGIVEREF(__pyx_t_5);
           __Pyx_ErrRestore(__pyx_t_3, __pyx_t_4, __pyx_t_5);
-          __pyx_t_3 = 0; __pyx_t_4 = 0; __pyx_t_5 = 0; 
+          __pyx_t_3 = 0; __pyx_t_4 = 0; __pyx_t_5 = 0;
           {__pyx_filename = __pyx_f[0]; __pyx_lineno = 201; __pyx_clineno = __LINE__; goto __pyx_L19_except_error;}
           __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
           __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
@@ -4938,7 +4938,7 @@ static PyObject *__pyx_f_17OpenGL_accele
  * 					err.args += (converter,)
  * 					raise
  * 		return result             # <<<<<<<<<<<<<<
- * 
+ *
  * cdef class CallFuncPyConverter( pyArgConverter ):
  */
   __Pyx_XDECREF(__pyx_r);
@@ -5600,7 +5600,7 @@ static PyObject *__pyx_pf_17OpenGL_accel
  * 			self.__class__.__name__,
  * 			self.index,             # <<<<<<<<<<<<<<
  * 		)
- * 
+ *
  */
   __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->index); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_GOTREF(__pyx_t_1);
@@ -5833,7 +5833,7 @@ static int __pyx_pf_17OpenGL_accelerate_
  * 				calculate_pyArgs = PyArgCalculator( self, calculate_pyArgs )
  * 			self.calculate_pyArgs = calculate_pyArgs
  */
-    __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_calculate_pyArgs, ((PyObject*)__pyx_ptype_17OpenGL_accelerate_7wrapper_PyArgCalculator)); 
+    __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_calculate_pyArgs, ((PyObject*)__pyx_ptype_17OpenGL_accelerate_7wrapper_PyArgCalculator));
     __pyx_t_1 = ((!(__pyx_t_2 != 0)) != 0);
     if (__pyx_t_1) {
 
@@ -5918,7 +5918,7 @@ static int __pyx_pf_17OpenGL_accelerate_
  * 				calculate_cArgs = CArgCalculator( self, calculate_cArgs )
  * 			self.calculate_cArgs = calculate_cArgs
  */
-    __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_calculate_cArgs, ((PyObject*)__pyx_ptype_17OpenGL_accelerate_7wrapper_CArgCalculator)); 
+    __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_calculate_cArgs, ((PyObject*)__pyx_ptype_17OpenGL_accelerate_7wrapper_CArgCalculator));
     __pyx_t_1 = ((!(__pyx_t_2 != 0)) != 0);
     if (__pyx_t_1) {
 
@@ -6003,7 +6003,7 @@ static int __pyx_pf_17OpenGL_accelerate_
  * 				calculate_cArguments = CArgumentCalculator( self, calculate_cArguments )
  * 			self.calculate_cArguments = calculate_cArguments
  */
-    __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_calculate_cArguments, ((PyObject*)__pyx_ptype_17OpenGL_accelerate_7wrapper_CArgumentCalculator)); 
+    __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_calculate_cArguments, ((PyObject*)__pyx_ptype_17OpenGL_accelerate_7wrapper_CArgumentCalculator));
     __pyx_t_1 = ((!(__pyx_t_2 != 0)) != 0);
     if (__pyx_t_1) {
 
@@ -6103,7 +6103,7 @@ static int __pyx_pf_17OpenGL_accelerate_
  * 			self.doCReturnAPI = True
  * 			self.doReturnValues = True
  */
-  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_returnValues, ((PyObject*)__pyx_ptype_17OpenGL_accelerate_7wrapper_returnConverter)); 
+  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_returnValues, ((PyObject*)__pyx_ptype_17OpenGL_accelerate_7wrapper_returnConverter));
   __pyx_t_2 = (__pyx_t_1 != 0);
   if (__pyx_t_2) {
 
@@ -6180,7 +6180,7 @@ static int __pyx_pf_17OpenGL_accelerate_
  * 			self.doCReturnAPI = False
  * 			self.doReturnValues = True             # <<<<<<<<<<<<<<
  * 			self.returnValues = returnValues
- * 
+ *
  */
     __pyx_v_self->doReturnValues = 1;
 
@@ -6188,7 +6188,7 @@ static int __pyx_pf_17OpenGL_accelerate_
  * 			self.doCReturnAPI = False
  * 			self.doReturnValues = True
  * 			self.returnValues = returnValues             # <<<<<<<<<<<<<<
- * 
+ *
  * 	def __call__( self, *args ):
  */
     __Pyx_INCREF(__pyx_v_returnValues);
@@ -6225,7 +6225,7 @@ static int __pyx_pf_17OpenGL_accelerate_
 
 /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/wrapper.pyx":296
  * 			self.returnValues = returnValues
- * 
+ *
  * 	def __call__( self, *args ):             # <<<<<<<<<<<<<<
  * 		cdef tuple pyArgs, cArgs, cArguments
  * 		if self.doPyargs:
@@ -6715,8 +6715,8 @@ static PyObject *__pyx_pf_17OpenGL_accel
  * 				)
  * 		else:
  * 			return result             # <<<<<<<<<<<<<<
- * 
- * 
+ *
+ *
  */
     __Pyx_XDECREF(__pyx_r);
     __Pyx_INCREF(__pyx_v_result);
@@ -6726,7 +6726,7 @@ static PyObject *__pyx_pf_17OpenGL_accel
 
   /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/wrapper.pyx":296
  * 			self.returnValues = returnValues
- * 
+ *
  * 	def __call__( self, *args ):             # <<<<<<<<<<<<<<
  * 		cdef tuple pyArgs, cArgs, cArguments
  * 		if self.doPyargs:
@@ -6755,7 +6755,7 @@ static PyObject *__pyx_pf_17OpenGL_accel
 
 /* "/mnt/homevar/var/pylive/src/OpenGL-dev/pyopengl/OpenGL_accelerate/src/wrapper.pyx":252
  * 	cdef PyArgCalculator calculate_pyArgs
- * 
+ *
  * 	cdef public object wrappedOperation, storeValues,returnValues             # <<<<<<<<<<<<<<
  * 	cdef int doPyargs, doCargs, doCarguments, doStoreValues, doReturnValues
  * 	cdef returnConverter c_returnValues
@@ -7309,7 +7309,7 @@ static PyObject *__pyx_pf_17OpenGL_accel
  * 			self.__class__.__name__,
  * 			self.name,             # <<<<<<<<<<<<<<
  * 		)
- * 
+ *
  */
   __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_GOTREF(__pyx_t_1);
@@ -8726,7 +8726,7 @@ static PyObject *__pyx_pf_17OpenGL_accel
  * 			self.__class__.__name__,
  * 			self.name,             # <<<<<<<<<<<<<<
  * 		)
- * 
+ *
  */
   __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 406; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_GOTREF(__pyx_t_1);
@@ -11173,7 +11173,7 @@ PyMODINIT_FUNC PyInit_wrapper(void)
  * import ctypes
  * from OpenGL import error             # <<<<<<<<<<<<<<
  * from OpenGL._null import NULL as _NULL
- * 
+ *
  */
   __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_GOTREF(__pyx_t_1);
@@ -11193,7 +11193,7 @@ PyMODINIT_FUNC PyInit_wrapper(void)
  * import ctypes
  * from OpenGL import error
  * from OpenGL._null import NULL as _NULL             # <<<<<<<<<<<<<<
- * 
+ *
  * cdef extern from "Python.h":
  */
   __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 4; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
@@ -11471,9 +11471,9 @@ static CYTHON_INLINE PyObject* __Pyx_PyO
 static CYTHON_INLINE void __Pyx_ExceptionSave(PyObject **type, PyObject **value, PyObject **tb) {
 #if CYTHON_COMPILING_IN_CPYTHON
     PyThreadState *tstate = PyThreadState_GET();
-    *type = tstate->exc_type;
-    *value = tstate->exc_value;
-    *tb = tstate->exc_traceback;
+    *type = tstate->curexc_type;
+    *value = tstate->curexc_value;
+    *tb = tstate->curexc_traceback;
     Py_XINCREF(*type);
     Py_XINCREF(*value);
     Py_XINCREF(*tb);
@@ -11485,12 +11485,12 @@ static void __Pyx_ExceptionReset(PyObjec
 #if CYTHON_COMPILING_IN_CPYTHON
     PyObject *tmp_type, *tmp_value, *tmp_tb;
     PyThreadState *tstate = PyThreadState_GET();
-    tmp_type = tstate->exc_type;
-    tmp_value = tstate->exc_value;
-    tmp_tb = tstate->exc_traceback;
-    tstate->exc_type = type;
-    tstate->exc_value = value;
-    tstate->exc_traceback = tb;
+    tmp_type = tstate->curexc_type;
+    tmp_value = tstate->curexc_value;
+    tmp_tb = tstate->curexc_traceback;
+    tstate->curexc_type = type;
+    tstate->curexc_value = value;
+    tstate->curexc_traceback = tb;
     Py_XDECREF(tmp_type);
     Py_XDECREF(tmp_value);
     Py_XDECREF(tmp_tb);
@@ -11533,12 +11533,12 @@ static int __Pyx_GetException(PyObject *
     *value = local_value;
     *tb = local_tb;
 #if CYTHON_COMPILING_IN_CPYTHON
-    tmp_type = tstate->exc_type;
-    tmp_value = tstate->exc_value;
-    tmp_tb = tstate->exc_traceback;
-    tstate->exc_type = local_type;
-    tstate->exc_value = local_value;
-    tstate->exc_traceback = local_tb;
+    tmp_type = tstate->curexc_type;
+    tmp_value = tstate->curexc_value;
+    tmp_tb = tstate->curexc_traceback;
+    tstate->curexc_type = local_type;
+    tstate->curexc_value = local_value;
+    tstate->curexc_traceback = local_tb;
     Py_XDECREF(tmp_type);
     Py_XDECREF(tmp_value);
     Py_XDECREF(tmp_tb);
