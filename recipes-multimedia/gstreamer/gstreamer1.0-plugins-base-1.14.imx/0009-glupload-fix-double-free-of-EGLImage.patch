From ede4f26c3530a1852fca716f386d9ba3d3b94757 Mon Sep 17 00:00:00 2001
From: Jonas Larsson <ljonas@google.com>
Date: Wed, 28 Aug 2019 09:43:42 -0700
Subject: [PATCH 09/17] glupload: fix double free of EGLImage

Caching EGLImage in qdata isn't thread safe nor needed. It's going away
upstream too.

https: //gitlab.freedesktop.org/gstreamer/gst-plugins-base/issues/375
https: //gitlab.freedesktop.org/gstreamer/gst-plugins-base/issues/659
Change-Id: I4e4a04682d53b12633ddf5dfb3bd3793b9298742
---
 gst-libs/gst/gl/gstglupload.c | 55 +++++++++++++++++++++++++++++++++--
 1 file changed, 53 insertions(+), 2 deletions(-)

diff --git a/gst-libs/gst/gl/gstglupload.c b/gst-libs/gst/gl/gstglupload.c
index c5c86a3ba..2c7e8aac3 100644
--- a/gst-libs/gst/gl/gstglupload.c
+++ b/gst-libs/gst/gl/gstglupload.c
@@ -585,6 +585,46 @@ _dma_buf_upload_transform_caps (gpointer impl, GstGLContext * context,
   return ret;
 }
 
+/* This qdata based caching isn't thread safe and thus prohibits the use
+ * of tees and queues upstream from glupload. The result can be a
+ * double free of EGLImage with ensuing memory corruption.
+ * It was added as a bandaid for some cache flush issue observed only
+ * on Mali/Exynos. Upstream indicates that it's going away soon.
+ *
+ * https://gitlab.freedesktop.org/gstreamer/gst-plugins-base/issues/375
+ * https://gitlab.freedesktop.org/gstreamer/gst-plugins-base/issues/659
+ */
+
+#if 1
+static void
+_dma_buf_upload_unref_eglimages (struct DmabufUpload *dmabuf)
+{
+  gint i;
+
+  for (i = 0; i < G_N_ELEMENTS (dmabuf->eglimage); i++) {
+    if (dmabuf->eglimage[i]) {
+      gst_egl_image_unref (dmabuf->eglimage[i]);
+      dmabuf->eglimage[i] = NULL;
+    }
+  }
+}
+
+static GstEGLImage *
+_get_cached_eglimage (GstMemory * mem, gint plane)
+{
+  return NULL;
+}
+
+static void
+_set_cached_eglimage (GstMemory * mem, GstEGLImage * eglimage, gint plane)
+{
+}
+#else
+static void
+_dma_buf_upload_unref_eglimages (struct DmabufUpload *dmabuf)
+{
+}
+
 static GQuark
 _eglimage_quark (gint plane)
 {
@@ -615,6 +655,7 @@ _set_cached_eglimage (GstMemory * mem, GstEGLImage * eglimage, gint plane)
   return gst_mini_object_set_qdata (GST_MINI_OBJECT (mem),
       _eglimage_quark (plane), eglimage, (GDestroyNotify) gst_egl_image_unref);
 }
+#endif
 
 static gboolean
 _dma_buf_upload_setup_buffer_pool (GstBufferPool **pool, GstAllocator *allocator,
@@ -813,6 +854,8 @@ _dma_buf_upload_accept (gpointer impl, GstBuffer * buffer, GstCaps * in_caps,
       return FALSE;
   }
 
+  _dma_buf_upload_unref_eglimages (dmabuf);
+
   out_fmt = GST_VIDEO_INFO_FORMAT (&dmabuf->upload->priv->out_info);
   if (out_fmt == GST_VIDEO_FORMAT_RGBA) {
     /* Now create one single EGLImage */
@@ -824,8 +867,10 @@ _dma_buf_upload_accept (gpointer impl, GstBuffer * buffer, GstCaps * in_caps,
     dmabuf->eglimage[0] =
         gst_egl_image_from_dmabuf_singleplaner (dmabuf->upload->context,
         mems, in_info, n_planes, mems_skip);
-    if (!dmabuf->eglimage[0])
+    if (!dmabuf->eglimage[0]) {
+      _dma_buf_upload_unref_eglimages (dmabuf);
       return FALSE;
+    }
 
     _set_cached_eglimage (mems[0], dmabuf->eglimage[0], 0);
   } else {
@@ -842,8 +887,10 @@ _dma_buf_upload_accept (gpointer impl, GstBuffer * buffer, GstCaps * in_caps,
           gst_dmabuf_memory_get_fd (mems[i]), in_info, i,
           mems[i]->offset + mems_skip[i]);
 
-      if (!dmabuf->eglimage[i])
+      if (!dmabuf->eglimage[i]) {
+        _dma_buf_upload_unref_eglimages (dmabuf);
         return FALSE;
+      }
 
       _set_cached_eglimage (mems[i], dmabuf->eglimage[i], i);
     }
@@ -931,6 +978,8 @@ _dma_buf_upload_perform (gpointer impl, GstBuffer * buffer, GstBuffer ** outbuf)
   gst_gl_context_thread_add (dmabuf->upload->context,
       (GstGLContextThreadFunc) _dma_buf_upload_perform_gl_thread, dmabuf);
 
+  _dma_buf_upload_unref_eglimages (dmabuf);
+
   if (!dmabuf->outbuf)
     return GST_GL_UPLOAD_ERROR;
 
@@ -956,6 +1005,8 @@ _dma_buf_upload_free (gpointer impl)
   if (dmabuf->pool)
     gst_object_unref(dmabuf->pool);
 
+  _dma_buf_upload_unref_eglimages (dmabuf);
+
   g_free (impl);
 }
 
-- 
2.26.0

